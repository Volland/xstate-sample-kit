{"version":3,"sources":["modules/fp/index.ts","modules/components/Content/Content.tsx","modules/models/users/types.ts","modules/models/users/index.ts","modules/utils/index.ts","modules/components/WelcomeMessage/WelcomeMessage.tsx","apps/login/components/ResetButton.tsx","modules/apis/q/index.ts","modules/components/FailureMessage/FailureMessage.tsx","apps/login/components/FailureMessage.tsx","modules/components/LoginForm/LoginForm.tsx","apps/login/components/LoginButton.tsx","modules/components/labels/usernameLabel/index.tsx","modules/components/input-controls/Username/Username.tsx","modules/machines/input-control/types.ts","modules/machines/input-control/configuration.ts","modules/streams/authentication.ts","apps/login/components/UsernameInput.tsx","modules/components/labels/passwordLabel/index.tsx","modules/components/input-controls/Password/Password.tsx","apps/login/components/PasswordInput.tsx","apps/login/components/LoginForm.tsx","modules/apis/login-api/index.ts","modules/xstate/useServiceLogger.ts","modules/machines/operator/types.ts","modules/machines/operator/configuration.ts","apps/login/components/LoginApp.tsx","modules/router/hooks.ts","modules/router/machine.ts","modules/SendContext.ts","modules/router/components/Link.tsx","modules/router/components/Redirect.tsx","modules/router/index.tsx","App.tsx","serviceWorker.ts","i18n.ts","index.tsx","modules/components/Content/Content.module.scss"],"names":["base","styles","flex","display","flexDirection","justifyContent","alignItems","Content","props","className","classes","content","style","children","progress","loading","undefined","getter","key","o","getter2","k1","k2","User","t","id","name","username","email","getUsername","format","str","args","replace","match","number","WelcomeMessage","text","user","ResetButton","data-test","type","theme","onClick","ApiFailure","code","error","isFailureReason","reason","failure","createFailure","createApiFailure","createDecodeFailure","isApiFailure","isDecodeFailure","q","decoder","promiser","a","response","json","console","log","JSON","stringify","i","Error","pipe","decode","E","decodeError","constant","identity","f","FailureMessage","failureMessage","api","LoginForm","useTranslation","use","titleOfShow","usernameInput","passwordInput","loginButton","resetButton","LoginButton","raised","disabled","Login","usernameLabel","block","UsernameInput","value","placeholder","required","invalid","onChange","onFocus","onBlur","helpText","validationMsg","icon","focused","StateType","EventType","configuration","states","initial","on","target","cond","isChangeEvent","event","createMachine","isValid","createXStateMachine","guards","isHuman","_","e","isRobot","isNotValid","initialAnonymousUser","password","anonymousUser$","BehaviorSubject","loginOperation$","O","machine","trim","getEventValue","R","isValid$","Username","useMachine","state","send","useObservableState","next","streamUsername","dispatchChangeEvent","matches","passwordLabel","PasswordInput","Object","assign","Password","streamPassword","isSubmitting","canNotSubmit","onLogin","fetchUser","params","fetch","service","useEffect","subscription","subscribe","nextState","groupCollapsed","context","groupEnd","unsubscribe","invoke","src","onDone","onError","services","submitOperation","evt","Promise","reject","combineLatest","usernameIsValid$","passwordIsValid$","map","b","LoginApp","operatorState","loginOperation","useServiceLogger","isInProgress","isNotInProgress","loggedIn","either","resetText","form","getValue","useLocation","path","React","history","push","actions","setUserId","userId","clearUserId","__","GOTO","home","users","entry","exit","notFound","route","test","SendContext","createContext","none","Provider","Consumer","Link","bind","to","href","linkWithSend","Redirect","redirect","redirectWithSend","Users","setUsers","didCancel","then","list","UserDetail","setUser","Home","NotFound","Route","routes","routerState","ready","setReady","rawUrl","url","reduce","acc","RegExp","outcome","exec","groups","keys","acc2","input","makeGotoEventFromUrl","location","pathname","padding","Infinity","NL","i18n","changeLanguage","setTimeout","App","fallback","Boolean","window","hostname","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","backend","loadPath","process","interpolation","escapeValue","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.269818f3.chunk.js","sourcesContent":["import { Option, fold as foldOption } from \"fp-ts/lib/Option\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { identity, constant } from \"fp-ts/lib/function\";\nimport * as Eq from 'fp-ts/lib/Eq'\n\nconst foo: Eq.Eq<{ name: string }> = {\n  equals: (a, b) => a.name === b.name\n}\n\nexport type Getter<K extends string> = <\n  T,\n  O extends {\n    [P in K]: T;\n  }\n>(\n  o: O\n) => O[K];\n\nexport const getter = <K extends string>(key: K): Getter<K> => <\n  T,\n  O extends { [P in K]: T }\n>(\n  o: O\n) => o[key];\n\nexport const getter2 = <K1 extends string, K2 extends string>(\n  k1: K1,\n  k2: K2\n) => <T, O extends { [P in K1]: { [R in K2]: T } }>(o: O) => o[k1][k2];\n\nexport const foldMaybe = <T>(maybe: Option<T>) => (base: T) => pipe(\n  maybe,\n  foldOption(constant(base), identity)\n)\n\nexport const foldValue = <T>(base: T) => (maybe: Option<T>) => pipe(\n  maybe,\n  foldOption(constant(base), identity)\n)\n\nexport const foldString = foldValue(\"\")","import classes from './Content.module.scss'\n\nimport * as React from \"react\";\n\nimport LinearProgress from \"../LinearProgress\";\n\nconst styles: React.CSSProperties = {\n  flex: \"1 1 auto\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\n\nconst Content = (props: { children: React.ReactNode; loading?: boolean }) => (\n  <>\n    <div className={classes.content} style={styles}>{props.children}</div>\n    <LinearProgress progress={props.loading ? undefined : 0} />\n  </>\n);\n\nexport default Content","import * as t from 'io-ts'\n\nexport const User = t.type({\n  id: t.number,\n  name: t.string,\n  username: t.string,\n  email: t.string,\n}, 'User')\n\nexport type User = t.TypeOf<typeof User>\n","import { getter } from '../../fp'\n\nexport * from './types'\n\nexport const getId = getter('id')\nexport const getUsername = getter('username')\n","export { default as prefixer } from './prefixer'\n\nexport const format = (str: string, ...args: any[]) => {\n  return str.replace(/%(\\d+)/g, (match, number) => { \n    return typeof args[number] != 'undefined'\n      ? args[number]\n      : match\n    ;\n  });\n};","import * as React from \"react\";\n\nimport { User, getUsername } from \"../../models/users\";\n\nimport { format } from \"../../utils\";\n\nimport text from \"./text.json\";\n\nexport interface PropsWelcomeMessage {\n  user: User;\n}\n\nconst WelcomeMessage = (props: PropsWelcomeMessage) => (\n    <div id=\"welcome\">\n      {format(text[\"Welcome %username\"], getUsername(props.user))}\n    </div>\n);\n\nexport default WelcomeMessage","import * as React from \"react\";\n\n// Components\nimport Button from \"../../../modules/components/input-controls/Button\";\n\n// Modules\nimport { PropsOf } from \"../../../modules/types\";\n\nexport interface PropsResetButton\n  extends Omit<PropsOf<typeof Button>, \"onClick\" | \"children\"> {\n  children: React.ReactNode;\n  onClick: () => void;\n}\n\nconst ResetButton = (props: PropsResetButton) => (\n  <Button\n    data-test=\"btn-reset\"\n    type=\"button\"\n    theme=\"secondary\"\n    onClick={props.onClick}\n  >\n    {props.children}\n  </Button>\n);\n\nexport default ResetButton;\n","import * as t from \"io-ts\";\nimport * as E from \"fp-ts/lib/Either\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { randomInt } from \"fp-ts/lib/Random\";\n\nimport { constant, identity } from \"fp-ts/lib/function\";\n\nexport const URL = \"https://jsonplaceholder.typicode.com/users/1\";\n\nexport type Params = { username: string; password: string };\n\nconst ApiFailure = t.type({\n  code: t.number,\n  error: t.string\n});\n\nexport type ApiFailure = t.TypeOf<typeof ApiFailure>;\n\nexport type Failure =\n  | { reason: \"api\"; error: ApiFailure }\n  | { reason: \"decode\"; error: t.Errors }\n  | { reason: \"error\"; error: Error };\n\nexport type QResponse<T> = E.Either<Failure, T>;\n\nconst isFailureReason = <R extends Failure[\"reason\"]>(reason: R) => (\n  failure: Failure\n): failure is Extract<Failure, { reason: R }> => failure.reason === reason;\n\nconst createFailure = <R extends Failure[\"reason\"]>(reason: R) => (\n  error: Extract<Failure, { reason: R }>[\"error\"]\n): Failure => ({ reason, error } as any);\n\nexport const createApiFailure = createFailure(\"api\");\nexport const createDecodeFailure = createFailure(\"decode\");\nexport const createErrorFailure = createFailure(\"error\");\n\nexport const isApiFailure = isFailureReason(\"api\");\nexport const isDecodeFailure = isFailureReason(\"decode\");\nexport const isErrorFailure = isFailureReason(\"error\");\n\nif (process.env.NODE_ENV === \"development\" && process.env.E2E !== \"on\") {\n  var shuffle = [1, 2, 3, 4];\n}\n\n/**\n * Wrapper for making type safe promise based network requests that can fail.\n *\n * @param decoder JSON response decoder created using io-ts\n * @returns A function that takes a function that returns a promise and returns a response.\n */\n\nexport const q = <T>(\n  decoder: t.Type<T>\n): ((promiser: () => Promise<Response>) => Promise<QResponse<T>>) => async (\n  promiser: () => Promise<Response>\n): Promise<QResponse<T>> => {\n  try {\n    const response = await promiser();\n    let json = await response.json();\n    console.log(JSON.stringify(json, null, 2));\n    if (process.env.NODE_ENV === \"development\" && process.env.E2E !== \"on\") {\n      // Iterate through all possible failure cases in development mode\n      const i = shuffle.shift();\n      i != null && shuffle.push(i);\n\n      if (i === 2) {\n        // Simulate ApiFailure\n        json = {\n          code: randomInt(0, 100)(),\n          error: \"Invalid username or password\"\n        };\n      } else if (i === 3) {\n        // Simulate Error\n        throw Error(\".. my hands up in the air sometime!\");\n      } else if (i === 4) {\n        // Simulate decoding error\n        delete json.username;\n      }\n    }\n\n    return pipe(\n      // Try to decode the incoming JSON with the given type decoder\n      decoder.decode(json),\n      // Map failure of the decoding process:\n      E.mapLeft(\n        (decodeError): Failure =>\n          pipe(\n            ApiFailure.decode(json),\n            // First try to decode the json as an ApiFailure\n            E.map(createApiFailure),\n            // But if that fails keep the initial decoding failure\n            E.fold(constant(createDecodeFailure(decodeError)), identity)\n          )\n      )\n    );\n  } catch (error) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.error(error);\n    }\n\n    return E.left({\n      reason: \"error\",\n      error: error instanceof Error ? error : Error(`${error}`)\n    });\n  }\n};\n\nexport default q;\n","import * as React from \"react\";\n\nimport { Failure, isApiFailure, isDecodeFailure } from \"../../apis/q\";\nimport { format } from \"../../utils\";\n\nexport interface PropsFailureMessage {\n  failure: Failure;\n  error?: string;\n  decode?: string;\n  api?: string;\n}\n\nconst f = (str?: string, ...args: any[]) => (str ? format(str, ...args) : null);\n\nconst FailureMessage = (props: PropsFailureMessage) => {\n  const failureMessage = isApiFailure(props.failure)\n    ? f(props.api, props.failure.error.code, props.failure.error.error)\n    : isDecodeFailure(props.failure)\n    ? f(props.decode)\n    : f(props.error, props.failure.error);\n\n  return failureMessage ? <span data-test=\"FailureMessage\">{failureMessage}</span> : null\n};\n\nexport default FailureMessage","import * as React from \"react\";\n\nimport CFailureMessage from \"../../../modules/components/FailureMessage\";\nimport { Failure } from \"../../../modules/apis/q\";\n\nimport text from './text.json'\n\nexport interface PropsFailureMessage {\n  failure: Failure;\n}\n\nconst FailureMessage = (props: PropsFailureMessage) => (\n  <CFailureMessage\n    failure={props.failure}\n    api={text[\"The server responded with code %code\"]}\n    decode={text[\"The server has responded with an unknown response.\"]}\n    error={text[\"The following error has occurred\"]}\n  />\n);\n\nexport default FailureMessage\n","import * as React from 'react'\n\nimport Typography from '../Typography'\n\nimport text from './text.json'\nimport { useTranslation } from 'react-i18next'\n\nexport interface PropsLoginForm {\n  usernameInput: React.ReactNode,\n  passwordInput: React.ReactNode,\n  loginButton: React.ReactNode,\n  resetButton?: React.ReactNode,\n}\n\nconst LoginForm = (props: PropsLoginForm) => {\n  const [t, i18n] = useTranslation();\n\n  return (\n  <form>\n      <Typography use={\"headline3\"}>{`[${t(text.titleOfShow)}]`}</Typography>\n      <br />\n      <br />\n      {props.usernameInput}\n      <br />\n      {props.passwordInput}\n      <br />\n      <div>\n        {props.loginButton}\n        {props.resetButton}\n      </div>\n    </form>\n)\n  }\n\nexport default LoginForm","import * as React from \"react\";\n\nimport Button from \"../../../modules/components/input-controls/Button\";\nimport { PropsOf } from \"../../../modules/types\";\n\nimport text from './text.json'\n\nexport interface PropsLoginButton extends PropsOf<typeof Button> {\n  disabled: boolean;\n  onClick: () => void;\n}\n\nconst LoginButton = (props: PropsLoginButton) => (\n  <Button\n    {...props}\n    type=\"button\"\n    data-test=\"btn-login\"\n    raised\n    disabled={props.disabled}\n    onClick={props.onClick}\n  >\n    {text.Login}\n  </Button>\n);\n\nexport default LoginButton;\n","import * as React from 'react'\nimport Typography from '../../Typography'\nimport text from './text.json'\n\nexport default <Typography use=\"headline6\">{text.usernameLabel}</Typography>","import * as React from \"react\";\n\nimport { Icon } from '@rmwc/icon'\n\nimport Input from \"../Input\";\nimport usernameLabel from \"../../labels/usernameLabel\";\n\nimport { PropsOf } from '../../../types'\n\ntype InputProps = PropsOf<typeof Input>;\nexport interface PropsUsername {\n  value: string;\n  onChange: InputProps[\"onChange\"];\n  onFocus: InputProps[\"onFocus\"];\n  onBlur: InputProps[\"onBlur\"];\n  style?: React.CSSProperties;\n  disabled: boolean;\n  invalid: boolean;\n  focused: boolean;\n}\n\nconst styles = {\n  block: { display: \"block\" }\n};\n\nexport const UsernameInput = (props: PropsUsername) => (\n  <>\n    <div>{usernameLabel}</div>\n    <div>\n      <Input\n        data-test=\"input-username\"\n        value={props.value}\n        placeholder=\"Username\"\n        required\n        invalid={props.invalid}\n        disabled={props.disabled}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        onBlur={props.onBlur}\n        style={styles.block}\n        helpText={{\n          children: props.invalid ? <span>{\"A username is required!\"}</span> : \"\",\n          validationMsg: true,\n        }}\n        icon={<Icon icon={'person'} theme={props.focused ? 'primary' : '' as any} />}\n      />\n    </div>\n  </>\n);\n\nexport default UsernameInput;\n","import {\n  MachineOptions as XStateMachineOptions,\n  MachineConfig as XStateMachineConfig,\n  StateSchema as XStateStateSchema\n} from \"xstate\";\n\nexport const StateTypePristine = \"pristine\" as const;\nexport const StateTypeDirty = \"dirty\" as const;\nexport const StateTypeTouched = \"touched\" as const;\nexport const StateTypeTouching = \"touching\" as const;\nexport const StateTypeUntouched = \"untouched\" as const;\nexport const StateTypeFocused = \"focused\" as const;\nexport const StateTypeBlurred = \"blurred\" as const;\nexport const StateTypeValid = \"valid\" as const;\nexport const StateTypeInvalid = \"invalid\" as const;\n\nexport const StateType = {\n  Pristine: StateTypePristine,\n  Dirty: StateTypeDirty,\n  Touched: StateTypeTouched,\n  Touching: StateTypeTouching,\n  Untouched: StateTypeUntouched,\n  Focused: StateTypeFocused,\n  Blurred: StateTypeBlurred,\n  Valid: StateTypeValid,\n  Invalid: StateTypeInvalid\n};\n\nexport const EventTypeChange: \"CHANGE\" = \"CHANGE\";\nexport const EventTypeFocus: \"FOCUS\" = \"FOCUS\";\nexport const EventTypeBlur: \"BLUR\" = \"BLUR\";\nexport const EventTypeReset: \"RESET\" = \"RESET\";\n\n/**\n * Dictionary of input control state event types.\n */\nexport const EventType = {\n  Change: EventTypeChange,\n  Focus: EventTypeFocus,\n  Blur: EventTypeBlur,\n  Reset: EventTypeReset\n};\n\n/**\n * Events dispatched for the input control state machine.\n */\nexport type Event<T> =\n  | {\n      type: typeof EventType.Change;\n      value?: T | undefined;\n      isRobot?: boolean;\n    }\n  | { type: typeof EventType.Focus }\n  | { type: typeof EventType.Blur }\n  | { type: typeof EventType.Reset };\n\n\n  export type ChangeEvent<T> = Extract<Event<T>, { type: typeof EventType.Change }>;\n  export type FocusEvent<T> = Extract<Event<T>, { type: typeof EventType.Focus }>;\n  export type BlurEvent<T> = Extract<Event<T>, { type: typeof EventType.Blur }>;\n  export type ResetEvent<T> = Extract<Event<T>, { type: typeof EventType.Reset }>;\n\n/**\n * Possible states for the input control machine.\n *\n * @typeparam T See [[Context.value]]\n */\nexport interface State<T> {\n  /** The input contorl state's context type */\n  context: any;\n  /** The input contorl state's value */\n  value: {\n    [StateType.Pristine]: typeof StateType.Dirty | typeof StateType.Pristine;\n    [StateType.Touched]:\n      | typeof StateType.Touched\n      | typeof StateType.Touching\n      | typeof StateType.Untouched;\n    [StateType.Focused]: typeof StateType.Focused | typeof StateType.Blurred;\n    [StateType.Valid]: typeof StateType.Valid | typeof StateType.Invalid;\n  };\n}\n\nexport interface StateSchema<T> extends XStateStateSchema<any> {\n  context: {};\n  states: {\n    [StateType.Pristine]: {\n      states: {\n        [StateType.Pristine]: {};\n        [StateType.Dirty]: {};\n      };\n    };\n    [StateType.Touched]: {\n      states: {\n        [StateType.Untouched]: {};\n        [StateType.Touching]: {};\n        [StateType.Touched]: {};\n      };\n    };\n    [StateType.Valid]: {\n      states: {\n        [StateType.Invalid]: {};\n        [StateType.Valid]: {};\n      };\n    };\n    [StateType.Focused]: {\n      states: {\n        [StateType.Focused]: {};\n        [StateType.Blurred]: {};\n      };\n    };\n  };\n}\n\nexport interface EventCreators<E> {\n  reset: () => E\n}\n\nexport type MachineOptions<T> = Partial<\n  XStateMachineOptions<any, Event<T>>\n>;\n\nexport type MachineConfig<\n  T,\n> = XStateMachineConfig<any, StateSchema<T>, Event<T>>;\n\n","import { createMachine as createXStateMachine } from \"xstate\";\n\nimport { StateType, EventType, Event, ChangeEvent } from \"./types\";\n\n/**\n * Raw configuration for input control state machines\n */\nexport const configuration = {\n  type: \"parallel\" as \"parallel\",\n  states: {\n    [StateType.Pristine]: {\n      initial: StateType.Pristine,\n      states: {\n        [StateType.Pristine]: {\n          on: {\n            [EventType.Change]: {\n              target: StateType.Dirty,\n              cond: \"isHuman\"\n            }\n          }\n        },\n        [StateType.Dirty]: {\n          on: {\n            [EventType.Reset]: StateType.Pristine\n          }\n        }\n      }\n    },\n    [StateType.Touched]: {\n      initial: StateType.Untouched,\n      states: {\n        [StateType.Untouched]: {\n          on: {\n            [EventType.Focus]: {\n              target: StateType.Touching\n            }\n          }\n        },\n        [StateType.Touching]: {\n          on: {\n            // [EventType.Reset]: StateType.Untouched,\n            [EventType.Blur]: {\n              target: StateType.Touched\n            }\n          }\n        },\n        [StateType.Touched]: {\n          on: {\n            [EventType.Reset]: StateType.Untouched\n          }\n        }\n      }\n    },\n    [StateType.Valid]: {\n      initial: StateType.Invalid,\n      states: {\n        [StateType.Invalid]: {\n          \"\": {\n            target: StateType.Valid,\n            cond: \"isValid\"\n          },\n          on: {\n            [EventType.Change]: {\n              target: StateType.Valid,\n              cond: \"isValid\"\n            }\n          }\n        },\n        [StateType.Valid]: {\n          on: {\n            [EventType.Change]: {\n              target: StateType.Invalid,\n              cond: \"isNotValid\"\n            },\n            [EventType.Reset]: StateType.Invalid\n          }\n        }\n      }\n    },\n    [StateType.Focused]: {\n      initial: StateType.Blurred,\n      states: {\n        [StateType.Focused]: {\n          on: {\n            [EventType.Blur]: StateType.Blurred\n          }\n        },\n        [StateType.Blurred]: {\n          on: {\n            [EventType.Focus]: StateType.Focused\n          }\n        }\n      }\n    }\n  }\n};\n\nconst isChangeEvent = <T>(event: Event<T>): event is ChangeEvent<T> =>\n  event.type === EventType.Change;\n\nexport const createMachine = <T>({\n  isValid = () => true\n}: {\n  isValid?: (value?: T) => boolean;\n} = {}) =>\n  createXStateMachine<any, Event<T>>(configuration, {\n    guards: {\n      isHuman: (_, e) => (isChangeEvent(e) ? !e.isRobot : false),\n      isValid: (_: any, e: Event<T>) =>\n        isChangeEvent(e) ? isValid(e.value) : true,\n      isNotValid: (_: any, e: Event<T>) =>\n        isChangeEvent(e) ? !isValid(e.value) : false\n    }\n  });\n","import { BehaviorSubject } from 'rxjs'\nimport * as O from 'fp-ts/lib/Option'\nimport * as E from 'fp-ts/lib/Either'\nimport { Failure } from '../apis/q'\nimport { User } from '../models/users'\n\ninterface AnonymousUser {\n  username: string,\n  password: string,\n}\n\nexport const initialAnonymousUser = {\n  username: \"\",\n  password: \"\"\n}\n\nexport const anonymousUser$ = new BehaviorSubject<AnonymousUser>(initialAnonymousUser);\n\nexport const loginOperation$ = new BehaviorSubject<O.Option<E.Either<Failure, User>>>(O.none)","import * as React from \"react\";\n\nimport { useObservableState } from \"observable-hooks\";\n\nimport UsernameInput, {\n  PropsUsername\n} from \"../../../modules/components/input-controls/Username\";\n\nimport createMachine, {\n  EventType\n} from \"../../../modules/machines/input-control\";\n\nimport {\n  anonymousUser$,\n  initialAnonymousUser\n} from \"../../../modules/streams/authentication\";\nimport { useMachine } from \"@xstate/react\";\nimport { getter2 } from \"../../../modules/fp\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport * as R from \"fp-ts/lib/Reader\";\nimport { Interpreter } from \"xstate\";\nimport { BehaviorSubject } from \"rxjs\";\n\nconst machine = createMachine<string>({\n  isValid: username => (username ? !!username.trim() : false)\n});\n\ntype Event = React.FormEvent<HTMLInputElement>;\n\nconst identity = (event: Event) => event;\n\nconst getEventValue = R.map<Event, string>(getter2(\"currentTarget\", \"value\"));\n\nconst streamUsername = (password: string) =>\n  R.chain<Event, string, string>(username => () => {\n    anonymousUser$.next({\n      username,\n      password\n    });\n\n    return username;\n  });\n\nconst dispatchChangeEvent = (send: Interpreter<any, any, any, any>[\"send\"]) =>\n  R.map(value => {\n    send({ type: EventType.Change, value });\n  });\n\nexport const isValid$ = new BehaviorSubject(false)\n\nconst Username = (\n  props: Omit<PropsUsername, \"value\" | \"onChange\" | \"onFocus\" | \"onBlur\" | \"invalid\" | \"focused\">\n) => {\n  const [state, send] = useMachine(machine);\n  \n  const { username, password } = useObservableState(\n    anonymousUser$,\n    initialAnonymousUser\n  );\n\n  const onChange = pipe(\n    identity,\n    getEventValue,\n    streamUsername(password),\n    dispatchChangeEvent(send),\n    R.chain(_ => () => isValid$.next(state.matches('valid.valid')))\n  );\n\n  return (\n    <UsernameInput\n      {...props}\n      value={username}\n      invalid={state.matches('touched.touched') && state.matches(\"valid.invalid\")}\n      focused={state.matches(\"focused.focused\")}\n      onChange={onChange}\n      onFocus={() => send({ type: EventType.Focus })}\n      onBlur={() => send({ type: EventType.Blur })}\n    />\n  );\n};\n\nexport default Username;\n","import * as React from 'react'\nimport Typography from '../../Typography'\nimport text from './text.json'\n\nexport default <Typography use=\"headline6\">{text.passwordLabel}</Typography>","import * as React from \"react\";\n\nimport { Icon } from '@rmwc/icon'\n\nimport Input from \"../Input\";\nimport passwordLabel from \"../../labels/passwordLabel\";\nimport { PropsOf } from \"../../../types\";\n\ntype InputProps = PropsOf<typeof Input>;\n\nexport interface PropsPassword {\n  value: string;\n  onChange: InputProps[\"onChange\"];\n  onFocus: InputProps[\"onFocus\"];\n  onBlur: InputProps[\"onBlur\"];\n  style?: React.CSSProperties;\n  disabled: boolean;\n  invalid: boolean;\n  focused: boolean;\n}\n\nconst styles = {\n  block: { display: \"block\" }\n};\n\nexport const PasswordInput = (props: PropsPassword) => (\n  <>\n    <div>{passwordLabel}</div>\n    <div>\n      <Input\n        data-test=\"input-password\"\n        value={props.value}\n        placeholder=\"Password\"\n        type=\"password\"\n        required\n        invalid={props.invalid}\n        disabled={props.disabled}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        onBlur={props.onBlur}\n        style={Object.assign({}, props.style, styles.block)}\n        helpText={{\n          children: props.invalid ? (\n            <span>{\"A password is required!\"}</span>\n          ) : (\n            \"\"\n          ),\n          validationMsg: true\n        }}\n        icon={<Icon icon={props.focused ? \"lock_open\" : \"lock\"} theme={props.focused ? 'primary': '' as any} />}\n      />\n    </div>\n  </>\n);\n\nexport default PasswordInput;\n","import * as React from \"react\";\n\nimport { useObservableState } from \"observable-hooks\";\n\nimport PasswordInput, {\n  PropsPassword\n} from \"../../../modules/components/input-controls/Password\";\n\nimport createMachine, {\n  EventType\n} from \"../../../modules/machines/input-control\";\n\nimport {\n  anonymousUser$,\n  initialAnonymousUser\n} from \"../../../modules/streams/authentication\";\nimport { useMachine } from \"@xstate/react\";\nimport { getter2 } from \"../../../modules/fp\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport * as R from \"fp-ts/lib/Reader\";\nimport { Interpreter } from \"xstate\";\nimport { BehaviorSubject } from \"rxjs\";\n\nconst machine = createMachine<string>({\n  isValid: password => (password ? !!password.trim() : false)\n});\n\ntype Event = React.FormEvent<HTMLInputElement>;\n\nconst identity = (event: Event) => event;\n\nconst getEventValue = R.map<Event, string>(getter2(\"currentTarget\", \"value\"));\n\nconst streamPassword = (username: string) =>\n  R.chain<Event, string, string>(password => () => {\n    anonymousUser$.next({\n      password,\n      username\n    });\n\n    return password;\n  });\n\nconst dispatchChangeEvent = (send: Interpreter<any, any, any, any>[\"send\"]) =>\n  R.map(value => {\n    send({ type: EventType.Change, value });\n  });\n\nexport const isValid$ = new BehaviorSubject(false)\n\nconst Password = (\n  props: Omit<PropsPassword, \"value\" | \"onChange\" | \"onFocus\" | \"onBlur\" | \"invalid\" | \"focused\">\n) => {\n  const [state, send] = useMachine(machine);\n\n  const { password, username } = useObservableState(\n    anonymousUser$,\n    initialAnonymousUser\n  );\n\n  const onChange = pipe(\n    identity,\n    getEventValue,\n    streamPassword(username),\n    dispatchChangeEvent(send),\n    R.chain(_ => () => isValid$.next(state.matches('valid.valid')))\n  );\n\n  return (\n    <PasswordInput\n      {...props}\n      value={password}\n      invalid={state.matches('touched.touched') && state.matches(\"valid.invalid\")}\n      focused={state.matches(\"focused.focused\")}\n      onChange={onChange}\n      onFocus={() => send({ type: EventType.Focus })}\n      onBlur={() => send({ type: EventType.Blur })}\n    />\n  );\n};\n\nexport default Password;\n","import React from \"react\";\n\nimport CLoginForm from \"../../../modules/components/LoginForm\";\n\nimport LoginButton from \"./LoginButton\";\nimport UsernameInput from \"./UsernameInput\";\nimport PasswordInput from \"./PasswordInput\";\n\nexport interface PropsLoginForm {\n  isSubmitting: boolean;\n  canNotSubmit: boolean;\n  onLogin: () => void;\n  resetButton: React.ReactNode;\n}\n\nconst LoginForm = (props: PropsLoginForm) => {\n  return (\n    <CLoginForm\n      usernameInput={<UsernameInput disabled={props.isSubmitting} />}\n      passwordInput={<PasswordInput disabled={props.isSubmitting} />}\n      loginButton={\n        <LoginButton disabled={props.canNotSubmit} onClick={props.onLogin} />\n      }\n      resetButton={props.resetButton}\n    />\n  );\n};\n\nexport default LoginForm;\n","import { User } from \"../../models/users/types\";\n\nimport q from '../q'\n\nexport const URL = \"https://jsonplaceholder.typicode.com/users/1\";\n\nexport type Params = { username: string; password: string };\n\nexport const fetchLogin = (_params: Params) =>\n  fetch(\"https://jsonplaceholder.typicode.com/users/1\");\n\nexport const fetchUser = async (params: Params) =>  q(User)(() => fetchLogin(params))","import { useEffect } from \"react\";\nimport { Interpreter, StateSchema, EventObject, Typestate } from \"xstate\";\n\n/**\n *\n */\nexport default <\n  TContext,\n  TStateSchema extends StateSchema = any,\n  TEvent extends EventObject = EventObject,\n  TTypestate extends Typestate<TContext> = any\n>(\n  service: Interpreter<TContext, TStateSchema, TEvent, TTypestate>,\n  name?: string\n) =>\n  useEffect(() => {\n    let i = 0;\n\n    const subscription = service.subscribe(nextState => {\n      if (name) {\n        console.groupCollapsed(`${name} (${++i})`);\n      }\n\n      console.log(JSON.stringify(nextState.value, null, 2))\n      console.log(JSON.stringify(nextState.context, null, 2))\n      console.log(nextState);\n\n      if (name) {\n        console.groupEnd();\n      }\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n  }, [service, name]);\n","import { Either } from \"fp-ts/lib/Either\";\n\nimport {\n  MachineOptions as XStateMachineOptions,\n  MachineConfig as XStateMachineConfig,\n  StateSchema as XStateStateSchema,\n  DoneInvokeEvent,\n  ErrorPlatformEvent\n} from \"xstate\";\n\nexport const StateTypeInProgress = \"inProgress\" as const;\nexport const StateTypeSubmitting = \"submitting\" as const;\nexport const StateTypeDone = \"done\" as const;\n\nexport const StateType = {\n  InProgress: StateTypeInProgress,\n  Submitting: StateTypeSubmitting,\n  Done: StateTypeDone,\n};\n\nexport const EventTypeSubmit: \"SUBMIT\" = \"SUBMIT\";\nexport const EventTypeReset: \"RESET\" = \"RESET\";\n\n/**\n * Dictionary of input control state event types.\n */\nexport const EventType = {\n  Submit: EventTypeSubmit,\n  Reset: EventTypeReset,\n};\n\n/**\n * Events dispatched for the input control state machine.\n */\nexport type Event<L, R> =\n  | { type: typeof EventType.Submit, promiser: () => Promise<Either<L, R>> }\n  | { type: typeof EventType.Reset }\n  // | DoneInvokeEvent<Either<L, R>>\n  // | ErrorPlatformEvent\n\n/**\n * Possible states for the input control machine.\n *\n * @typeparam T See [[Context.value]]\n */\nexport type State = \n  | { value: typeof StateType.InProgress  }\n  | { value: typeof StateType.Submitting  }\n  | { value: typeof StateType.Done  }\n\nexport interface StateSchema extends XStateStateSchema {\n  context: {},\n  states: {\n    [StateType.InProgress]: {},\n    [StateType.Submitting]: {},\n    [StateType.Done]: {}\n  }\n}\n\nexport type MachineOptions<L, R> = Partial<\n  XStateMachineOptions<any, Event<L, R>>\n>;\n\nexport type MachineConfig<L, R> = XStateMachineConfig<\n  any,\n  StateSchema,\n  Event<L, R>\n>;\n","import { createMachine as createXStateMachine } from \"xstate\";\n\nimport { StateType, EventType, Event } from \"./types\";\n\n/**\n * Raw configuration for input control state machines\n */\nexport const configuration = {\n  initial: StateType.InProgress,\n  on: {\n    [EventType.Reset]: {\n      target: StateType.InProgress\n    }\n  },\n  states: {\n    [StateType.InProgress]: {\n      on: {\n        [EventType.Submit]: {\n          target: StateType.Submitting\n        }\n      }\n    },\n    [StateType.Submitting]: {\n      invoke: {\n        id: \"submitOperation\",\n        src: \"submitOperation\",\n        onDone: StateType.Done,\n        onError: StateType.Done\n      }\n    },\n    [StateType.Done]: {}\n  }\n};\n\nexport const services = {\n  submitOperation: (_: any, evt: Event<any, any>) =>\n    evt.type === EventType.Submit\n      ? evt.promiser()\n      : Promise.reject(\"submitService invoked by non-submit event!\")\n};\n\nexport const createMachine = <L, R>() =>\n  createXStateMachine<any, Event<L, R>>(configuration, {\n    services: services as any\n  });\n","// Libs\nimport React from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport * as O from \"fp-ts/lib/Option\";\nimport * as E from \"fp-ts/lib/Either\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { constant } from \"fp-ts/lib/function\";\n\n// Components\nimport Content from \"../../../modules/components/Content/Content\";\nimport WelcomeMessage from \"../../../modules/components/WelcomeMessage\";\nimport ResetButton from \"./ResetButton\";\nimport FailureMessage from \"./FailureMessage\";\nimport LoginForm from \"./LoginForm\";\n\n// Modules\nimport { fetchUser } from \"../../../modules/apis/login-api\";\nimport { useServiceLogger } from \"../../../modules/xstate\";\nimport { foldString } from \"../../../modules/fp\";\n// import { machine as loginMachine, api } from \"../../../modules/machines/login\";\n\nimport configuration, {\n  createMachine, EventType\n} from \"../../../modules/machines/operator\";\n\n// Text\nimport text from \"./text.json\";\nimport { User } from \"../../../modules/models/users\";\nimport { Failure } from \"../../../modules/apis/q\";\n\nimport { isValid$ as usernameIsValid$ } from \"./UsernameInput\";\nimport { isValid$ as passwordIsValid$ } from \"./PasswordInput\";\nimport { merge, map, startWith } from \"rxjs/operators\";\nimport { combineLatest } from \"rxjs\";\nimport { useObservableState } from \"observable-hooks\";\n\nimport { loginOperation$, anonymousUser$ } from '../../../modules/streams/authentication'\n\nconst isValid$ = combineLatest(usernameIsValid$, passwordIsValid$).pipe(\n  map(([a, b]) => a && b),\n);\n\nconst machine = createMachine<Failure, User>();\n\n// Exports\nconst LoginApp = () => {\n  // Hooks\n  const [operatorState, send, service] = useMachine(machine);\n  const isValid = useObservableState(isValid$, false)\n  const loginOperation = useObservableState(loginOperation$, O.none)\n \n  useServiceLogger(service, \"login\");\n\n  // Derived information\n  const isInProgress = operatorState.matches(\"inProgress\");\n  const isNotInProgress = !isInProgress;\n  const isSubmitting = operatorState.matches(\"submitting\");\n\n  const canNotSubmit =\n    isNotInProgress || !isValid\n\n  const loggedIn = pipe(\n    loginOperation,\n    O.fold(constant(false), either =>\n      pipe(either, E.fold(constant(false), constant(true)))\n    )\n  );\n\n  const resetText = isInProgress\n    ? text[\"Reset\"]\n    : isSubmitting\n    ? text[\"Cancel\"]\n    : loggedIn\n    ? text[\"Logout\"]\n    : text[\"Try again\"];\n\n  const reset = () => {\n    send({ type: EventType.Reset})\n    anonymousUser$.next({ username: \"\", password: \"\"})\n    loginOperation$.next(O.none)\n  }\n\n  const resetButton = <ResetButton onClick={reset}>{resetText}</ResetButton>;\n\n  const form = (\n    <LoginForm\n      isSubmitting={isSubmitting}\n      canNotSubmit={canNotSubmit}\n      onLogin={() => {\n        send({\n          type: EventType.Submit,\n          promiser: async () => {\n            const response = await fetchUser(anonymousUser$.getValue())\n\n            loginOperation$.next(O.some(response))\n\n            anonymousUser$.next(({ username: \"\", password: \"\"}))\n\n            return response\n          }\n        });\n      }}\n      resetButton={resetButton}\n    />\n  );\n\n  const content = pipe(\n    loginOperation,\n    O.fold(constant(form), either =>\n      pipe(\n        either,\n        E.fold(\n          failure => (\n            <>\n              <FailureMessage failure={failure} />\n              {resetButton}\n            </>\n          ),\n\n          user => {\n            return (\n              <>\n                <WelcomeMessage user={user} />\n                {resetButton}\n              </>\n            );\n          }\n        )\n      )\n    )\n  );\n\n  return <Content loading={isSubmitting}>{content}</Content>;\n};\n\nexport default LoginApp;\n","import * as React from 'react'\nimport history from 'history/browser'\n\nexport const useLocation = (path: string) => {\n  React.useEffect(() => {\n    history.push(path);\n\n    return () => {};\n  }, [path]);\n}","\nimport { createMachine, assign, interpret } from 'xstate'\n\nexport type Context = Partial<{ userId: number | undefined }>\n\nexport type Event = { type: 'GOTO', route: string  } & Context\n\nexport const configuration = {\n  id: \"routes\",\n  initial: \"home\",\n  context: {},\n  on: {\n    GOTO: [\n      { target: \"home\", cond: \"home\" },\n      { target: \"users.user\", cond: \"users.user\" },\n      { target: \"users\", cond: \"users\" },\n      { target: \"notFound\" }\n    ]\n  },\n  states: {\n    home: {},\n    users: {\n      initial: \"home\",\n      states: {\n        home: {},\n        user: {\n          entry: \"setUserId\",\n          exit: \"clearUserId\"\n        }\n      }\n    },\n    notFound: {}\n  }\n};\n\nexport const guards = {\n  home: (_: Context, e: Event) => e.route === \"home\",\n  \"users.user\": (_: Context, e: Event) =>\n    e.route === \"users\" && /^\\d+$/.test(`${e.userId || ''}`),\n  users: (_: Context, e: Event) => e.route === \"users\"\n}\n\n\nexport const actions = {\n  setUserId: assign<Context, Event>({ userId: (_, e) => e.userId }),\n  clearUserId: assign<Context, Event>({ userId: (_, __) => undefined }),\n}\n\nexport const machine = createMachine<Context, Event>(\n  configuration,\n  { guards, actions }\n)\n\n\n","import { Interpreter } from 'xstate'\nimport { createContext } from 'react'\nimport { Option, none } from 'fp-ts/lib/Option'\n\nexport type Send = Option<Interpreter<any, any, any, any>['send']>\n\nconst SendContext = createContext<Send>(none);\n\nexport const { Provider, Consumer } = SendContext","import * as React from \"react\";\nimport { Context } from \"../machine\";\nimport { Consumer, Send } from \"../../SendContext\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport * as O from \"fp-ts/lib/Option\";\nimport { constant, identity } from \"fp-ts/lib/function\";\n\nexport const linkWithSend = (props: PropsLink) => (send: Send) => {\n  const onClick = pipe(\n    send,\n    O.map(f => f.bind(null, { type: \"GOTO\", route: props.to, ...props.params }, undefined)),\n    O.fold(constant(undefined), identity)\n  );\n\n  return (\n    <a href=\"#\" onClick={onClick}>\n      {props.children}\n    </a>\n  );\n};\n\nexport interface PropsLink {\n  to: string;\n  params?: Context;\n  children: React.ReactNode;\n}\n\nconst Link = (props: PropsLink) => (\n  <Consumer>{linkWithSend(props)}</Consumer>\n);\n\nexport default Link\n","import * as React from \"react\";\n\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport * as O from \"fp-ts/lib/Option\";\nimport { constant, identity } from \"fp-ts/lib/function\";\n\nimport { Consumer, Send } from \"../../SendContext\";\n\nexport const redirectWithSend = (props: PropsRedirect) => (send: Send) => {\n  React.useEffect(() => {\n    const redirect = pipe(\n      send,\n      O.map(f => () => {f({ type: \"GOTO\", route: props.to })}),\n      O.fold(constant(() => {}), identity)\n    );\n\n    redirect()\n  }, [props.to]);\n\n  return null;\n};\n\nexport interface PropsRedirect {\n  to: string;\n}\n\nconst Redirect = (props: PropsRedirect) => (\n  <Consumer>{redirectWithSend(props)}</Consumer>\n);\n\nexport default Redirect\n","import * as React from \"react\";\n\nimport history from 'history/browser'\n\nimport { useMachine } from \"@xstate/react\";\nimport useServiceLogger from \"../xstate/useServiceLogger\";\n\nimport { useLocation } from './hooks'\nimport { machine, Event} from './machine'\n\nimport Link from './components/Link'\nimport Redirect from './components/Redirect'\nimport { Provider } from '../SendContext'\nimport * as O from \"fp-ts/lib/Option\";\n\n// Comonents\nconst Users = () => {\n  useLocation(\"/users\");\n\n  const [users, setUsers] = React.useState<{ id: number; username: string }[]>(\n    []\n  );\n\n  let didCancel = false;\n\n  React.useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => !didCancel && setUsers(users));\n    return () => {\n      didCancel = true;\n    };\n  }, []);\n\n  const list = users.map(user => (\n    <li key={user.id}>\n      <Link to={`users`} params={{ userId: user.id }}>\n        {user.username}\n      </Link>\n    </li>\n  ));\n\n  return <ul>{list}</ul>;\n}\n\nconst UserDetail = (props: { id: number }) => {\n  useLocation(\"/users/\" + props.id);\n  const [user, setUser] = React.useState<any>(undefined);\n\n  let didCancel = false;\n\n  React.useEffect(() => {\n    try {\n      fetch(\"https://jsonplaceholder.typicode.com/users/\" + props.id)\n        .then(response => response.json())\n        .then(user => {\n          if (!didCancel) {\n            if (user.id) {\n              setUser(user);\n            } else {\n              setUser(null);\n            }\n          }\n        });\n    } catch (error) {\n      setUser(null);\n    }\n\n    return () => {\n      didCancel = true;\n    };\n  }, [props.id]);\n\n  if (user === null) {\n    return <Redirect to={\"notFound\"} />;\n  }\n\n  if (!user) {\n    return \"Loading...\";\n  }\n\n  return (\n    <div>\n      <h1>{user.username}</h1>\n      <label>\n        <strong>Id</strong>\n      </label>\n      <br />\n      {user.id}\n      <hr />\n      <label>\n        <strong>Email</strong>\n      </label>\n      <br />\n      {user.email}\n    </div>\n  );\n}\n\n\n\nconst Home = () => {\n  useLocation(\"/\");\n\n  return (\n    <>\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n      <Link to={\"users\"}>Show users</Link>\n    </>\n  );\n}\n\nconst NotFound = () => {\n  useLocation(\"404\");\n  return <div>404</div>;\n}\n\nconst Route = ({ state }: any) => {\n  if (state.matches(\"home\")) {\n    return <Home />;\n    // @ts-ignore\n  } else if (state.matches(\"users.user\")) {\n    // @ts-ignore\n    if (state.context.userId) {\n      // @ts-ignore\n      return <UserDetail id={state.context.userId} />;\n    }\n    return <Redirect to={\"users\"} />;\n    // @ts-ignore\n  } else if (state.matches(\"users\")) {\n    return <Users />;\n    // @ts-ignore\n  } else if (state.matches(\"notFound\")) {\n    return <NotFound />;\n  }\n\n  return <Redirect to={\"notFound\"} />;\n}\n\nconst routes = [\n  /users\\/(?<userId>\\d+)/,\n  /users/,\n]\n\nconst makeGotoEventFromUrl = (rawUrl: string): Event => {\n  const url = rawUrl.replace(/^\\/|\\/$/, '')\n\n  const { event } = routes.reduce(\n    (acc, next) => {\n      if (acc.match) {\n        return acc;\n      } else if (next instanceof RegExp) {\n        if (next.test(url)) {\n          const outcome = next.exec(url)\n\n          if (outcome) {\n            const groups = outcome.groups || {}\n            \n            const route = Object.keys(groups).reduce(\n              (acc2, key) => {\n                const value = groups[key]\n                return acc2.replace(`/${value}`, '')\n              },\n              outcome.input\n            ).replace(/\\//g, '.').replace(/^\\.|\\.$/, '')\n\n            return { match: true, event: { type: 'GOTO', route, ...groups }}\n          }\n        }\n      }\n\n      return acc;\n    },\n    ({ match: false, event: { type: 'GOTO', route: 'home' }})\n  )\n\n  return event as Event\n}\n\nexport default () => {\n  const [routerState, send, service] = useMachine(machine);\n  const [ready, setReady] = React.useState(false)\n\n  useServiceLogger(service, 'router')\n  \n  const context = O.some(send)\n\n  React.useEffect(\n    () => {\n      const event = makeGotoEventFromUrl(history.location.pathname)\n      send(event)\n      setReady(true)\n    },\n    []\n  )\n\n  if(!ready) {\n    return null\n  }\n\n  return (\n    <Provider value={context}>\n    <div style={{padding: 20}}>\n      <Route state={routerState} />\n      <hr />\n      <Link to={\"home\"}>Home</Link>\n      <hr />  \n      <Link to={\"free-money\"}>Free Money</Link>\n      <hr />\n      <Link to={\"users\"} params={{ userId: Infinity }}>\n        User with <i>Infinite</i> id\n      </Link>\n    </div>\n    </Provider>\n  );\n}\n","import \"./App.scss\";\n\nimport React, { Suspense } from \"react\";\n\nimport LoginApp from \"./apps/login\";\nimport { useTranslation } from \"react-i18next\";\n\nimport Router from './modules/router'\n\nconst NL = () => {\n  const [, i18n] = useTranslation();\n\n  React.useEffect(() => {\n    i18n.changeLanguage(\"nl\");\n    setTimeout(() => {\n      i18n.changeLanguage(\"en\");\n    }, 2500);\n  }, [i18n]);\n\n  return null;\n};\n\nconst App: React.FC = () => {\n  return (\n    <Suspense fallback=\"...\">\n      {/* <React.StrictMode> */}\n        <LoginApp />\n        <NL />\n      {/* </React.StrictMode> */}\n        <Router />\n    </Suspense>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// not like to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\ni18n\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n    backend: {\n      loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`,\n    },\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\n\n\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './i18n';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__1kQCU\"};"],"sourceRoot":""}