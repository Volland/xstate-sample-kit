{"version":3,"sources":["modules/utils/booleans.ts","modules/components/SendContext.ts","modules/router/hooks.ts","modules/router/components/Redirect.tsx","modules/components/Content/Content.tsx","modules/utils/assert.ts","modules/utils/getters.ts","modules/utils/functions.ts","modules/utils/strings.ts","modules/utils/objects.ts","modules/utils/delay.ts","modules/utils/index.ts","modules/models/users/types.ts","modules/models/users/index.ts","modules/components/WelcomeMessage/WelcomeMessage.tsx","apps/xassy-login/components/ResetButton.tsx","modules/apis/q/index.ts","modules/components/FailureMessage/FailureMessage.tsx","apps/xassy-login/components/FailureMessage.tsx","modules/components/FormField/FormField.tsx","modules/components/LoginForm/LoginForm.tsx","apps/xassy-login/components/LoginButton.tsx","modules/machines/input-control/types.ts","modules/machines/input-control/configuration.ts","modules/xstate/useServiceLogger.ts","modules/xstate/index.ts","modules/streams/reset.ts","modules/streams/authentication.ts","modules/machines/operator/configuration.ts","modules/components/input-controls/Input.tsx","modules/components/inputProvider.tsx","modules/hooks.ts","modules/components/labels/usernameLabel/index.tsx","modules/components/input-controls/Username/Username.tsx","apps/xassy-login/components/UsernameInput.tsx","modules/components/labels/passwordLabel/index.tsx","modules/components/input-controls/Password/Password.tsx","apps/xassy-login/components/PasswordInput.tsx","apps/xassy-login/components/LoginForm.tsx","modules/apis/login-api/index.ts","modules/machines/operator/types.ts","apps/xassy-login/components/LoginApp.tsx","modules/components/input-controls/ValidationHelperText.tsx","apps/xassy-contact-us/components/Name.tsx","apps/xassy-contact-us/components/Email.tsx","apps/xassy-contact-us/components/Message.tsx","apps/xassy-contact-us/streams.ts","apps/xassy-contact-us/machine.tsx","apps/xassy-contact-us/components/ContactUs.tsx","apps/xassy-router/machine.ts","apps/xassy-router/index.tsx","modules/router/components/Link.tsx","apps/xassy/index.tsx","App.tsx","serviceWorker.ts","i18n.ts","index.tsx","modules/components/FormField/FormField.module.scss","modules/components/Content/Content.module.scss"],"names":["f","SendContext","createContext","send","state","Provider","Consumer","useLocation","path","React","history","push","test","RedirectWithSend","props","console","warn","to","type","route","Redirect","styles","flex","display","flexDirection","justifyContent","alignItems","Content","className","classes","content","style","children","progress","loading","undefined","isTruthy","value","trim","isNaN","Infinity","Array","isArray","length","isNotNull","emailPattern","getter","key","o","getter2","k1","k2","getEventCurrentTargetValue","dot","forward","voidFn","pick","keys","object","Object","reduce","acc","includes","delay","milliseconds","Promise","resolve","setTimeout","format","str","args","replace","match","number","User","t","id","name","username","email","getUsername","WelcomeMessage","text","user","ResetButton","ref","takeFocus","current","focus","data-test","onClick","ApiFailure","code","error","isFailureReason","reason","failure","makeCreateFailure","createApiFailure","createDecodeFailure","createErrorFailure","isApiFailure","isDecodeFailure","q","decoder","process","REACT_APP_DISABLE_Q_SHUFFLE","promiser","a","response","json","i","Error","pipe","decode","E","decodeError","constant","identity","FailureMessage","failureMessage","api","FormField","label","use","FormFields","classNames","horizontal","centered","join","LoginForm","useTranslation","titleOfShow","usernameInput","passwordInput","loginButton","resetButton","LoginButton","raised","disabled","Login","StateType","EventType","configuration","context","states","on","actions","initial","target","cond","isChangeEvent","event","blur","useServiceLogger","service","useEffect","subscription","subscribe","nextState","groupCollapsed","log","JSON","stringify","groupEnd","unsubscribe","isDoneInvokeEvent","reset$","Subject","reset","next","dotValue","isRobot","loginOperation$","BehaviorSubject","O","isAuthenticated$","map","maybeResponse","filter","username$","robot","password$","usernameValue$","passwordValue$","combineLatest","password","getValue","bind","flow","getPassword","resetLoginOperation","makeValue","makeHumanValue","makeRobotoValue","setUsername","setPassword","resetUsername","resetPassword","resetAnonymousUser","eventType","Input","inputRef","onKeyPress","evt","which","onEnter","textFieldProps","inputEventIdentity","getEventValue","R","inputProvider","f1","f2","isValid","withConfig","value$","update","machine","machineConfiguration","createXStateMachine","assignValue","assign","ctx","e","guards","isHuman","_","isNotValid","createMachine","config","entry","reset$Ref","change$Ref","spawn","mapTo","tap","change","streamUsername","state$","mapStateIsValid","matches","isValid$","maybeState","subject$","useMachine","useObservableState","onChange","onFocus","onBlur","invalid","focused","defineProperty","stringInputProvider","options","semigroupPredicate","S","isValidFn","concat","required","picker","InputComponent","providedProps","usernameLabel","block","UsernameInput","placeholder","icon","theme","helpText","validationMsg","takeFocus$","scan","makeInput","InputProvider","Username","passwordLabel","PasswordInput","data-status","Password","isSubmitting","onLogin","canNotSubmit","fetchUser","params","fetch","invoke","src","onDone","onError","isSubmitEvent","services","submitOperation","reject","usernameIsValid$","passwordIsValid$","b","canReset$","isValid$Ref","assignDone","data","LoginApp","operatorState","canReset","loginOperation","isInProgress","isNotInProgress","loggedIn","either","resetText","form","ValidationHelperText","persistent","defaultText","Name","Email","Message","contactUsResponse$","nameIsValid$","emailIsValid$","updateName","updateEmail","updateMessage","pingReset","ContactUs","operatorService","renderRequiredHelperText","makeRenderRequiredHelperText","renderEmailHelperText","onSubmit","submitEvent","minWidth","copy","maybeEither","GOTO","home","signup","login","contactUs","404","NotFound","Location","Route","routes","Router","ready","setReady","rawUrl","url","RegExp","outcome","exec","groups","acc2","input","makeGotoEventFromUrl","location","pathname","Link","isAuthenticated","unelevated","outlined","NL","i18n","changeLanguage","App","fallback","Boolean","window","hostname","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","backend","loadPath","interpolation","escapeValue","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","module","exports"],"mappings":"mNAwB0BA,E,0ECnBbC,EAAcC,wBAAmC,CAC5DC,KAAO,aACPC,MAAO,K,GAG6BH,EAAvBI,SAAuBJ,EAAbK,S,uBCaZC,EAAc,SAACC,GAC1BC,aAAgB,WACdC,IAAQC,KAAK,MAAMC,KAAKJ,GAAQA,EAAnB,WAA8BA,MAC1C,CAACA,KCdOK,EAAmB,SAACC,GAM/B,OALAL,aAAgB,WACdM,QAAQC,KAAR,0BAAgCF,EAAMG,KACtCH,EAAMX,KAAK,CAAEe,KAAM,OAAQC,MAAM,GAAD,OAAKL,EAAMG,QAC1C,CAACH,EAAMG,GAAIH,EAAMX,OAEb,MAuBMiB,EARE,SAACN,GAA0B,IAClCX,EAASM,aAAiBR,GAA1BE,KAER,OACE,gBAAC,EAAD,iBAAsBW,EAAtB,CAA6BX,KAAMA,M,wFC/BjCkB,EAA8B,CAClCC,KAAM,WACNC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAUCC,EAPC,SAACb,GAAD,OACd,gCACE,uBAAKc,UAAWC,IAAQC,QAASC,MAAOV,GAASP,EAAMkB,UACvD,gBAAC,IAAD,CAAgBC,SAAUnB,EAAMoB,aAAUC,EAAY,MCD7CC,EAAW,SAAIC,GAC1B,QAAIA,IACmB,kBAAVA,IACAA,EAAMC,OACW,kBAAVD,GACRE,MAAMF,IAAUA,IAAUG,MAAaH,EAAQ,GAAKA,EAAQ,GAC3DI,MAAMC,QAAQL,GAChBA,EAAMM,OAAS,IAGfN,IAiBAO,EAAY,SAAIP,GAAJ,OAA6C,MAATA,GAKhDQ,EAAe,gDCtBfC,EAAS,SAAmBC,GAAnB,OAAyC,SAI7DC,GAJ6D,OAK1DA,EAAED,KAEME,EAAU,SACrBC,EACAC,GAFqB,OAGlB,SAA+CH,GAA/C,OAAwDA,EAAEE,GAAIC,KAGtDC,EAA6BH,EAAQ,gBAAiB,SAEtDI,EAAMP,ECfNQ,EAAU,SAAItD,GAAJ,OAA8C,SAAAqC,GAEnE,OADArC,EAAEqC,GACKA,IAgDIkB,EAAS,aCpETjB,EAAO,SAACD,GAAD,OAAmBA,EAAMC,QCgChCkB,EAAO,sCAAwBC,EAAxB,yBAAwBA,EAAxB,uBAA+C,SAAAC,GAAM,OACvEC,OAAOF,KAAKC,GAAQE,QAAO,SAACC,EAAKd,GAK/B,OAJIU,EAAKK,SAASf,KAChBc,EAAId,GAAOW,EAAOX,IAGbc,IACN,MC9BUE,EAFM,eAACC,EAAD,uDAAgB,IAAhB,OAAyB,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OCmD5EI,EAAS,SAACC,GAAiC,IAAD,uBAAhBC,EAAgB,iCAAhBA,EAAgB,kBACrD,OAAOD,EAAIE,QAAQ,WAAW,SAACC,EAAOC,GACpC,MAA8B,oBAAhBH,EAAKG,GACfH,EAAKG,GACLD,M,QC/CKE,EAAOC,IAAO,CACzBC,GAAID,IACJE,KAAMF,IACNG,SAAUH,IACVI,MAAOJ,KACN,QCRUK,GANQlC,EAAO,MAMDA,EAAO,a,QCFnBmC,GANQ,SAACnE,GAAD,OACnB,uBAAK8D,GAAG,WACLR,EAAOc,EAAK,qBAAsBF,EAAYlE,EAAMqE,SC2B5CC,GA1BK,SAACtE,GACnB,IAAMuE,EAAM5E,SAAuC,MAanD,OAXAA,mBAAsB,WAChBK,EAAMwE,WACRnB,YACE,WAAO,IAAD,EACJ,UAAAkB,EAAIE,eAAJ,SAAaC,UAEf,OAGH,CAAC1E,EAAMwE,UAAWD,EAAIE,UAGvB,gBAAC,IAAD,CACEF,IAAKA,EACLI,YAAU,YAEVC,QAAS5E,EAAM4E,SAEd5E,EAAMkB,WCeP2D,I,MAAahB,IAAO,CACxBiB,KAAMjB,IACNkB,MAAOlB,OA+FHmB,GAAkB,SAAmBC,GAAnB,OAAiC,SACvDC,GADuD,OAERA,EAAQD,SAAWA,IAQ9DE,GAAoB,SAAmBF,GAAnB,OAAiC,SACzDF,GADyD,MAE5C,CAAEE,SAAQF,WAKZK,GAAmBD,GAzFI,OA6FvBE,GAAsBF,GAnFO,UAuF7BG,GAAqBH,GA7EM,SAkF3BI,GAAeP,GAtGQ,OA2GvBQ,GAAkBR,GAjGW,UA2M3BS,IArGeT,GA5FU,SAiHpB,SAASU,GAa3B,OAPEC,qIAAYC,4BAOd,uCAAO,WACLC,GADK,mBAAAC,EAAA,sEAGC7C,EAAM,KAHP,gCAMoB4C,IANpB,cAMGE,EANH,gBAOcA,EAASC,OAPvB,OAOCA,EAPD,OAcDL,qIAAYC,4BAdX,2BA4BgB,IAANK,EA5BV,uBA8BOC,MAAM,uCA9Bb,QA+BgB,IAAND,UAEFD,EAAKhC,SAjCb,iCAwCImC,eAELT,EAAQU,OAAOJ,GAEfK,WACE,SAACC,GAAD,OACEH,eACEtB,GAAWuB,OAAOJ,GAElBK,MAAMjB,IAENiB,OAAOE,mBAASlB,GAAoBiB,IAAeE,kBAnDxD,2DA4DIH,OACLf,GAAmB,gBAAiBY,MAAjB,KAAiCA,MAAM,GAAD,iBA7DxD,0DAAP,mDAAM,KClNFhH,GAAI,SAACqE,GAAD,2BAAkBC,EAAlB,iCAAkBA,EAAlB,yBAAmCD,EAAMD,EAAM,WAAN,GAAOC,GAAP,OAAeC,IAAQ,MAY3DiD,GAVQ,SAACzG,GACtB,IAAM0G,EAAiBnB,GAAavF,EAAMkF,SACtChG,GAAEc,EAAM2G,IAAK3G,EAAMkF,QAAQH,MAAMD,KAAM9E,EAAMkF,QAAQH,MAAMA,OAC3DS,GAAgBxF,EAAMkF,SACtBhG,GAAEc,EAAMoG,QACRlH,GAAEc,EAAM+E,MAAO/E,EAAMkF,QAAQH,OAEjC,OAAO2B,EAAiB,wBAAM/B,YAAU,kBAAkB+B,GAAyB,M,SCDtED,GATQ,SAACzG,GAAD,OACrB,gBAAC,GAAD,CACEkF,QAASlF,EAAMkF,QACfyB,IAAKvC,GAAK,wCACVgC,OAAQhC,GAAK,sDACbW,MAAOX,GAAK,uC,wDCLHwC,GAAY,SAAC5G,GAAD,aACvB,uBAAKc,UAAWC,KAAQ,eAAxB,UACGf,EAAM6G,aADT,QACkB,gBAAC,KAAD,CAAYC,IAAK,aAAc9G,EAAM6G,OACpD7G,EAAMkB,WAUE6F,GAAa,SAAC/G,GACzB,IAAMgH,EAAa,GAKnB,OAHAhH,EAAMiH,YAAcD,EAAWnH,KAAKkB,KAAQ,2BAC5Cf,EAAMkH,UAAYF,EAAWnH,KAAKkB,KAAQ,yBAGxC,uBAAKD,UAAWkG,EAAWG,KAAK,MAC7BnH,EAAMkB,WCDEkG,GAhBG,SAACpH,GAA2B,IAAD,EAC/BqH,eAALxD,EADoC,oBAG3C,OACE,4BACE,gBAAC,GAAD,KAAW,gBAAC,KAAD,CAAYiD,IAAK,aAAjB,WAAmCjD,EAAEO,GAAKkD,aAA1C,OACX,gBAAC,GAAD,KAAYtH,EAAMuH,eAClB,gBAAC,GAAD,KAAYvH,EAAMwH,eAClB,gBAAC,GAAD,CAAYP,YAAU,EAACC,UAAQ,GAC7B,gBAAC,GAAD,KAAYlH,EAAMyH,aAClB,gBAAC,GAAD,KAAYzH,EAAM0H,gBCDXC,GAZK,SAAC3H,GAAD,OAClB,gBAAC,IAAD,iBACMA,EADN,CAEE4H,QAAM,EACNjD,YAAU,YACVkD,SAAU7H,EAAM6H,SAChBjD,QAAS5E,EAAM4E,UAEdR,GAAK0D,Q,gHCDGC,GAXe,OAWfA,GAVoB,WAUpBA,GATiB,QASjBA,GARmB,UAQnBA,GAPoB,WAOpBA,GANqB,YAMrBA,GALmB,UAKnBA,GAJmB,UAInBA,GAHiB,QAGjBA,GAFmB,UAuBnBC,GAR4B,SAQ5BA,GAP0B,QAO1BA,GANwB,OAMxBA,GAL0B,QCZ1BC,GAAqD,CAChE7H,KAAM,WACN8H,QAAS,GACTC,QAAM,mBACHJ,GAAiB,CAChBK,GAAG,eACAJ,GAAmB,CAClBK,QAAS,kBAJX,cAQHN,GAAqB,CACpBO,QAASP,GACTI,QAAM,mBACHJ,GAAqB,CACpBK,GAAG,eACAJ,GAAmB,CAClBO,OAAQR,GACRS,KAAM,cALR,cASHT,GAAkB,CACjBK,GAAG,eACAJ,GAAkBD,MAXnB,KAVJ,cA0BHA,GAAoB,CACnBO,QAASP,GACTI,QAAM,mBACHJ,GAAsB,CACrBK,GAAG,eACAJ,GAAkB,CACjBO,OAAQR,OAJV,cAQHA,GAAqB,CACpBK,GAAG,eAEAJ,GAAiB,CAChBO,OAAQR,OAZV,cAgBHA,GAAoB,CACnBK,GAAG,eACAJ,GAAkBD,MAlBnB,KA5BJ,cAmDHA,GAAkB,CACjBO,QAASP,GACTI,QAAM,mBACHJ,GAAoB,CACnBK,GAAG,aACD,GAAI,CACFG,OAAQR,GACRS,KAAM,YAEPR,GAAmB,CAClBO,OAAQR,GACRS,KAAM,cATR,cAaHT,GAAkB,CACjBK,IAAE,mBACCJ,GAAmB,CAClBO,OAAQR,GACRS,KAAM,eAHR,cAKCR,GAAkBD,IALnB,KAdA,KArDJ,cA6EHA,GAAoB,CACnBO,QAASP,GACTI,QAAM,mBACHJ,GAAoB,CACnBK,GAAG,eACAJ,GAAiBD,MAHlB,cAMHA,GAAoB,CACnBK,GAAG,eACAJ,GAAkBD,MARnB,KA/EJ,IA+FFU,GAAgB,SAAIC,GAAJ,OACpBA,EAAMtI,OAAS4H,IAsCJtD,GAAQ,iBAAmB,CAAEtE,KAAM4H,KACnCW,GAAO,iBAAkB,CAAEvI,KAAM4H,KC5G7BY,GA/Be,SAM9BC,EACA9E,GAP8B,OAS9B+E,qBAAU,WACR,IAAI7C,EAAI,EAEF8C,EAAeF,EAAQG,WAAU,SAAAC,GAarC,OAZIlF,GACF9D,QAAQiJ,eAAR,UAA0BnF,EAA1B,eAAqCkC,EAArC,MAGFhG,QAAQkJ,IAAIC,KAAKC,UAAUJ,EAAU1H,MAAO,KAAM,IAClDtB,QAAQkJ,IAAIC,KAAKC,UAAUJ,EAAUf,QAAS,KAAM,IACpDjI,QAAQkJ,IAAIF,GAERlF,GACF9D,QAAQqJ,WAGH,WACLP,EAAaQ,oBAGhB,CAACV,EAAS9E,KC9BFyF,GAAoB,SAC/Bd,GAD+B,MAEK,eAAe5I,KAAK4I,EAAMtI,O,oBCVnDqJ,GAAS,I,MAAIC,GAKbC,GAAQ,kBAAMF,GAAOG,QCUrBC,GAAWtH,EAAI,SAEfuH,GAAUvH,EAAI,SAKdwH,I3BXa7K,E2BQI4K,GAGC,IAAIE,KAAgCC,SAEtDC,GAAmBH,GAAgB5D,KAC9CgE,cAAI,SAAAC,GAAa,OACfjE,eACEiE,EACAH,OAAM,SAAAlE,GAAQ,OAAII,eAAKJ,EAAUM,OAAOE,oBAAS,GAAQA,oBAAS,QAClE0D,OAAO1D,oBAAS,GAAQA,oBAAS,QAGrC8D,aAAOvI,IAGIwI,GAAY,IAAIN,KAA+B,CAC1DzI,MAAO,GACPgJ,OAAO,IAGIC,GAAY,IAAIR,KAA+B,CAC1DzI,MAAO,GACPgJ,OAAO,IAGIE,GAAiBH,GAAUnE,KAAKgE,aAAIN,KACpCa,GAAiBF,GAAUrE,KAAKgE,aAAIN,KAQpC3F,IAPiByG,aAC5BF,GACAC,IACAvE,KAAKgE,cAAI,yCAA0C,CAAEnG,SAA5C,KAAsD4G,SAAtD,UAGsBb,GAAgBc,SAASC,KAAKf,IACpCgB,eAAKT,GAAUO,SAASC,KAAKR,IAAYT,KACvDmB,GAAcD,eAAKP,GAAUK,SAASC,KAAKN,IAAYX,IAWvDoB,GAJoBzI,EAC/BuH,GAAgBH,KAAKkB,KAAKf,KAGyBe,KAAK,KAAMb,QAEnDiB,GAAY,SAACX,GAAD,OAAoB,SAAIhJ,GAAJ,MAAkB,CAC7DA,QACAgJ,WAEWY,GAAiBD,IAAU,GAC3BE,GAAkBF,IAAU,GAC5BG,GAAcN,eACzBvJ,EACA2J,GACA3I,EAAQ8H,GAAUV,KAAKkB,KAAKR,KAC5BT,IAEWyB,GAAcP,eACzBvJ,EACA2J,GACA3I,EAAQgI,GAAUZ,KAAKkB,KAAKN,KAC5BX,IAGW0B,GAAgBR,eAC3BvJ,EACA4J,GACA5I,EAAQ8H,GAAUV,KAAKkB,KAAKR,KAC5BT,IACAiB,KAAK,KAAM,IAEAU,GAAgBT,eAC3BvJ,EACA4J,GACA5I,EAAQgI,GAAUZ,KAAKkB,KAAKN,KAC5BX,IACAiB,KAAK,KAAM,IAEAW,GAAqBV,eAAKQ,GAAeC,IAEjCzB,GAAgB5D,KACnCgE,cAAI,SAAAC,GAAa,OACfjE,eACEiE,EACAH,OAAM,SAAAlE,GAAQ,OAAII,eAAKJ,EAAUM,OAAOE,mBAAS,MAAOC,SACxDyD,OAAO1D,mBAAS,MAAOC,SAG3B6D,aAAOvI,IAKT2H,GAAOT,UAAU+B,eAAKU,GAAoBR,K,aCnFUS,G,kBCjCvCC,GAAQ,SAAC3L,GACpB,IAAM4L,EAAWjM,SAAsC,MAGvDA,mBAAsB,WAChBK,EAAMwE,WACRnB,YACE,kCAAMuI,EAASnH,eAAf,aAAM,EAAkBC,UACxB,OAGH,CAAC1E,EAAMwE,YAEV,IAAMqH,EAAalM,WACjB,kBAAM,SAACmM,GACa,KAAdA,EAAIC,OAAgB/L,EAAMgM,QAC5BhM,EAAMgM,UACGhM,EAAM6L,YACf7L,EAAM6L,WAAWC,MAGrB,CAAC9L,EAAMgM,QAAShM,EAAM6L,aAOnBI,GACDjM,EAHFwE,UAGExE,EAFFgM,QA3BwC,aA6BtChM,EA7BsC,0BAiC1C,OACE,gBAAC,KAAD,iBACMiM,EADN,CAEEL,SAAUA,EACVC,WAAYA,MAKHF,MCbTO,GAAqB,SAACxD,GAAD,OAAuBA,GAE5CyD,GAAgBC,OAA0B9J,GAmBnC+J,GAAgB,SAAC,GAMJ,IvBmCOC,EAAmBC,EuBxClDxI,EAKuB,EALvBA,KAKuB,IAJvByI,eAIuB,MAJbjG,oBAAS,GAII,EAHvBkG,EAGuB,EAHvBA,WACAC,EAEuB,EAFvBA,OACAC,EACuB,EADvBA,OAsCMC,EPsBqB,WAQjB,IAAD,yDAAP,GAAO,IAPTJ,eAOS,MAPC,kBAAM,GAOP,EANTC,EAMS,EANTA,WAOMI,EAAuBJ,EACzBA,EAAWxE,IACXA,GAEJ,OAAO6E,aACLD,EACA,CACExE,QAAS,CACP0E,YAAaC,aAA6B,CACxCzL,MAAO,SAAC0L,EAAKC,GAAN,OAAazE,GAAcyE,GAAKA,EAAE3L,MAAQ0L,EAAI1L,UAGzD4L,OAAQ,CACNC,QAAS,SAACC,EAAGH,GAAJ,QAAWzE,GAAcyE,KAAMA,EAAEpD,SAC1C0C,QAAS,SAACS,EAAiBC,GAAlB,OAAkCV,EAAQ/D,GAAcyE,GAAKA,EAAE3L,MAAQ0L,EAAI1L,QACpF+L,WAAY,SAACL,EAAiBC,GAAlB,OACTV,EAAQ/D,GAAcyE,GAAKA,EAAE3L,MAAQ0L,EAAI1L,WO/ClCgM,CAAsB,CACpCf,UACAC,WAAY1B,gBAtCY,SACxByC,GAEA,IAAMC,EAAQD,EAAOC,MACjB9L,MAAMC,QAAQ4L,EAAOC,OACnBD,EAAOC,MACP,CAACD,EAAOC,OACV,GAEJ,OAAO,eACFD,EADL,CAEEtF,QAAQ,eACHsF,EAAOtF,QADL,CAGLwF,UAAW,KAEXC,WAAY,OAEdF,MAAM,GAAD,oBACAA,GADA,CAEHT,aAAiB,CACfU,UAAW,kBAAME,aAAMnE,GAAOtD,KAAK0H,aPoEL,CAAEzN,KAAM4H,QOnEtC2F,WAAY,kBACVC,aACElB,EAAOvG,KACL2H,cAAI,SAAAvM,OAGJ4I,cAAI,SAAA5I,GAAK,OPgEH,SAAIA,GAAJ,IAAcuI,EAAd,8DAAmD,CACvE1J,KAAM4H,GACNzG,QACAuI,WOnE2BiE,CAAOlE,GAAStI,GAAQuI,GAAQvI,kBAUrBkL,GAAcjG,cAG9CwH,EAAiB5B,SACrBrB,gBvBR6BuB,EuBQbK,EvBRgCJ,EuBQxB/F,WvBRyD,SACnFV,GAGA,OADAwG,EAAGxG,GACIyG,EAAGzG,KuBI2BS,aAG/B0H,EAAS,IAAIjE,KAAyCC,QAItDiE,EAAkBjE,OAFH,SAAC3K,GAAD,OACnBA,EAAM6O,QAAQ,kBAIVC,EAAWH,EAAO9H,KACtBgE,cAAI,SAAAkE,GAAU,OACZlI,eAAKkI,EAAYH,EAAiBjE,OAAO1D,oBAAS,GAAQC,iBAIxDmF,EAED,SAAA3L,GAAU,IC9H6CsO,EAAa1E,ED8H3D,EACmB2E,qBAAW3B,GAD9B,mBACLtN,EADK,KACED,EADF,UC9H2DuK,EDqIpDtK,GCrIuCgP,EDqI/CL,GCpIJrE,KAAKK,OAAOL,IAErBjK,aAAgB,kBAAM,kBAAM2O,EAAS1E,KAAKK,WAAS,CAACqE,IDmIlD,IAAMtK,EAAWwK,aAAmB9B,EAAOvG,KAAKgE,aAAIN,KAAY,IAE1D4E,EAAWtI,eAAK+F,GAAoBC,GAAe6B,GACnDU,EAAU3D,eAAKrG,GAAOrF,EAAMoD,GAC5BkM,EAAS5D,eAAKpC,GAAMtJ,EAAMoD,GAEhC,OAAOzC,EAAMkB,SAAS,CACpBK,MAAOyC,EACP4K,QACEtP,EAAM6O,QAAQ,oBAAsB7O,EAAM6O,QAAQ,iBACpDU,QAASvP,EAAM6O,QAAQ,mBACvBM,WACAC,UACAC,YAQJ,OAJA9L,OAAOiM,eAAenD,EAAO,cAAe,CAC1CpK,MAAM,GAAD,OAAKwC,EAAL,qBAGA,CAAC4H,EAAOyC,EAAUH,IAGZ5B,MAEF0C,GAAsB,SACjChL,GAKI,IAJJiL,EAIG,uDADC,GAEEC,EAAqBC,wBAAuBA,gBAAvBA,GAIrBC,EAAYF,EAAmBG,OACnCJ,EAAQK,SAAW/N,EAAWiF,oBAAS,GACvCyI,EAAQxC,SAAWjG,oBAAS,IAGxBmG,EAAS,IAAI1C,KAA+B,CAChDzI,MAAO,GACPgJ,OAAO,IAGHoC,EAAS5B,eACbvJ,EACA2J,GACA3I,EAAQkK,EAAO9C,KAAKkB,KAAK4B,IACzB7C,IAnBC,EAsBkCwC,GAAc,CACjDtI,OACAyI,QAAS2C,EACTzC,SACAC,WA1BC,mBAsBIpN,EAtBJ,KAsBc6O,EAtBd,KAsBwBH,EAtBxB,KA6BGqB,EAAS5M,EAAK,UAAW,UAAW,SAEpC6M,EAAiB,SACrBvP,GADqB,OAOrB,gBAACT,EAAD,MACG,SAAAiQ,GAAa,OACZ,gCACE,gBAAC,GAAD,iBAAWxP,EAAWwP,IACrBxP,EAAMkB,SACHlB,EAAMkB,SAASoO,EAAOE,IACtB,UAUZ,OAJA3M,OAAOiM,eAAeS,EAAgB,cAAe,CACnDhO,MAAM,GAAD,OAAKwC,EAAL,2BAGA,CAACwL,EAAgB7C,EAAQ0B,EAAUzB,EAAQsB,I,kBE5NrC,mBAAC,KAAD,CAAYnH,IAAK,aAAc1C,GAAKqL,eCoB7ClP,GAAS,CACbmP,MAAO,CAAEjP,QAAS,UA+BLkP,GA5Bc,SAAC3P,GAC5B,OACE,gCACGyP,GACD,2BACE,gBAAC,GAAD,CACE9K,YAAU,iBACVpD,MAAOvB,EAAMuB,MACbqO,YAAY,WACZP,UAAQ,EACRxH,SAAU7H,EAAM6H,SAChBmE,QAAShM,EAAMgM,QACfyC,SAAUzO,EAAMyO,SAChBC,QAAS1O,EAAM0O,QACfC,OAAQ3O,EAAM2O,OACd1N,MAAOV,GAAOmP,MACdlL,UAAWxE,EAAMwE,UACjBqL,KAAM,gBAAC,KAAD,CAAMA,KAAM,SAAUC,MAAO9P,EAAM6O,QAAU,eAAYxN,IAC/D0O,SAAU,CACR7O,SAAUlB,EAAM4O,QAAU,4BAAO,2BAAoC,2BACrEoB,eAAe,QCvBrBC,GAAaxG,GAAOtD,KACxB0H,aAAM,GACNqC,cAAK,SAACnN,EAAK6G,GAAN,OAAe7G,EAAM6G,M,GAGqBuG,GAAU,CACzDpM,KAAM,WACNyI,QAASlL,EACTqL,OAAQtB,GACRqB,OAAQpC,K,qBAJI8F,G,MAAehC,G,MAmBdiC,I,MAZE,SAACrQ,GAChB,IAAMwE,EAAYgK,aAAmByB,GAAY,GAEjD,OACE,gBAACG,GAAD,MACG,SAAAZ,GAAa,OACZ,gBAAC,GAAD,iBAAmBA,EAAmBxP,EAAtC,CAA6CwE,UAAWA,U,SCvCjD,mBAAC,KAAD,CAAYsC,IAAK,aAAc1C,GAAKkM,eCkB7C/P,GACG,CAAEE,QAAS,SA8BL8P,GA3Bc,SAACvQ,GAAD,OAC3B,gCACE,2BAAMsQ,IACN,2BACE,gBAAC,GAAD,CACE3L,YAAU,iBACVpD,MAAOvB,EAAMuB,MACbqO,YAAY,WACZxP,KAAK,WACLiP,UAAQ,EACRmB,cAAaxQ,EAAM4O,QAAU,aAAUvN,EACvCwG,SAAU7H,EAAM6H,SAChBmE,QAAShM,EAAMgM,QACfyC,SAAUzO,EAAMyO,SAChBC,QAAS1O,EAAM0O,QACfC,OAAQ3O,EAAM2O,OACd1N,MAAO4B,OAAOmK,OAAO,GAAIhN,EAAMiB,MAAOV,IACtCsP,KAAM,gBAAC,KAAD,CAAMA,KAAM7P,EAAM6O,QAAU,YAAc,OAAQiB,MAAO9P,EAAM6O,QAAW,eAAYxN,IAC5F0O,SAAU,CACR7O,SAAUlB,EAAM4O,QAAU,4BAAO,2BAAoC,2BACrEoB,eAAe,Q,GCzBwBG,GAAU,CACzDpM,KAAM,WACNyI,QAASlL,EACTqL,OAAQrB,GACRoB,OAAQlC,K,qBAJI4F,G,MAAehC,G,MAiBdqC,I,MAVE,SAACzQ,GAChB,OACE,gBAAC,GAAD,MACG,SAAAwP,GAAa,OACZ,gBAAC,GAAD,iBAAmBA,EAAmBxP,SCJ/BoH,GAbG,SAACpH,GACjB,OACE,kBAAC,GAAD,CACEuH,cAAe,kBAAC,GAAD,CAAeM,SAAU7H,EAAM0Q,aAAc1E,QAAShM,EAAM2Q,UAC3EnJ,cAAe,kBAAC,GAAD,CAAeK,SAAU7H,EAAM0Q,aAAc1E,QAAShM,EAAM2Q,UAC3ElJ,YACE,kBAAC,GAAD,CAAaI,SAAU7H,EAAM4Q,aAAchM,QAAS5E,EAAM2Q,UAE5DjJ,YAAa1H,EAAM0H,eCAVmJ,GAAS,uCAAG,WAAOC,GAAP,SAAAhL,EAAA,+EAA2BL,GAAE7B,EAAF6B,EAAQ,kBAL5DsL,MAAM,oDAKmB,2CAAH,sDCNXhJ,GANsB,aAMtBA,GAHsB,aAGtBA,GAFgB,OAEhBA,GALiB,QAKjBA,GAJmB,UAoBnBC,GAR4B,SAQ5BA,GAP0B,QAO1BA,GAN0B,QAM1BA,GAL8B,UZrB9BC,GAAgB,CAC3BnE,GAAI,WACJwE,QAASP,GACTK,GAAG,eACAJ,GAAkB,CACjBO,OAAQR,KAGZI,QAAM,qBACHJ,GAAuB,CACtBO,QAASP,GACTI,QAAM,qBACHJ,GAAkB,CACjBK,IAAE,qBACCJ,GAAoBD,IADrB,eAECC,GAAmB,CAClBO,OAAO,aAAD,OAAeR,MAHvB,MAFA,eASHA,GAAoB,CACnBK,GAAG,eACAJ,GAAkBD,MAXnB,MAHJ,eAmBHA,GAAuB,CACtBiJ,OAAQ,CACNlN,GAAI,kBACJmN,IAAK,kBACLC,OAAQnJ,GACRoJ,QAASpJ,MAxBT,eA2BHA,GAAiB,IA3Bd,KAmCKqJ,IAJuC1F,GAIf1D,GAJgC,SACnEU,GADmE,OAEpBA,EAAMtI,OAASsL,KAInD2F,GAAW,CACtBC,gBAAiB,SAACjE,EAAQvB,GAAT,OACfsF,GAActF,GACVA,EAAIjG,WACJ1C,QAAQoO,OAAO,gDAGVhE,GAAgB,SAC3Bd,GAD2B,OAG3BK,aACEL,EAAaA,EAAWxE,IAAiBA,GACzC,CACEoJ,SAAUA,MazBVjD,GAAWzD,aAAc6G,GAAkBC,IAAkBtL,KACjEgE,cAAI,mCAAErE,EAAF,KAAK4L,EAAL,YAAY5L,GAAK4L,MAGjBC,GAAYhH,aAAc6G,GAAkBC,IAAkBtL,KAClEgE,cAAI,mCAAErE,EAAF,KAAK4L,EAAL,YAAY5L,GAAK4L,MAKjB9E,GAAUW,IAA6B,SAAAC,GAC3C,OAAO,eACFA,EADL,CAEErF,OAAO,eACFqF,EAAOrF,OADN,eAEHJ,GAAiB,CAChB0F,MAAQ,gBAGZvF,QAAS,CACPwF,UAAW,MAEbD,MAAOT,aAAO,CACZU,UAAW,kBAAME,aAAMnE,GAAOtD,KAAK0H,aAAM,CAAEzN,KAAM4H,QACjD4J,YAAa,kBAAMhE,aAAMQ,GAASjI,KAAKgE,cAAI,SAAAqC,GAAO,MAAK,CAAEpM,KAAMoM,EAAUxE,GAAkBA,iBAG9FyE,WAAW,CACZpE,QAAS,CACPwJ,WAAY,SAACxE,EAAGvB,GAAJ,OAAYtC,GAAkBsC,IAAQ/B,GAAgBH,KAAKK,OAAO6B,EAAIgG,WA6FvEC,GAtFE,WAAM,MAEkBxD,qBAAW3B,IAF7B,mBAEdoF,EAFc,KAEC3S,EAFD,KAEOwJ,EAFP,KAIf2D,EAAUgC,aAAmBJ,IAAU,GACvC6D,EAAWzD,aAAmBmD,IAAW,GACzCO,EAAiB1D,aAAmBzE,GAAiBE,QAE3DrB,GAAiBC,EAAS,SAG1B,IAAMsJ,EAAeH,EAAc7D,QAAQpG,IACrCqK,GAAmBD,EACnBzB,EAAesB,EAAc7D,QAAQpG,IAErC6I,EACJwB,IAAoB5F,EAEhB6F,EAAWlM,eACf+L,EACAjI,OAAO1D,oBAAS,IAAQ,SAAA+L,GAAM,OAC5BnM,eAAKmM,EAAQjM,OAAOE,oBAAS,GAAQA,oBAAS,SAI5CgM,EAAYJ,EACd/N,GAAI,MACJsM,EACAtM,GAAI,OACJiO,EACAjO,GAAI,OACJA,GAAK,aAEHsD,EAAc,kBAAC,GAAD,CAAaG,UAAWoK,EAAUrN,QAAS+E,GAAOnF,UAAWwN,EAAc7D,QAAQpG,KAAkBwK,GAEnHC,EACJ,kBAAC,GAAD,CACE9B,aAAcA,EACdE,aAAcA,EACdD,QAAS,WACPtR,EAAK,CACHe,KAAM4H,GACNnC,SAAS,WAAD,4BAAE,4BAAAC,EAAA,sEACe+K,GdlDmB,CACpD7M,SAAUE,KACV0G,SAAUI,Oc+CQ,cACFjF,EADE,yBAMDA,GANC,2CAAF,kDAAC,MAUb2B,YAAaA,IAIX1G,EAAUmF,eACd+L,EACAjI,OAAO1D,mBAASiM,IAAO,SAAAF,GAAM,OAC3BnM,eACEmM,EACAjM,QACE,SAAAnB,GAAO,OACL,oCACE,kBAAC,GAAD,CAAgBA,QAASA,IACxBwC,MAIL,SAAArD,GACE,OACE,6BACE,kBAAC,GAAD,CAAgBA,KAAMA,IACtB,6BACCqD,WASf,OAAO,kBAAC,EAAD,CAAStG,QAASsP,GAAe1P,IC9I3ByR,GARc,SAACzS,GAC5B,OACE,gBAAC,KAAD,CAAqBgQ,eAAa,EAAC0C,YAAU,GAC1C1S,EAAM4O,QAAU5O,EAAMkB,SAAYlB,EAAM2S,aAAe,6B,GCRf5D,GAAoB,OAAQ,CAAEM,UAAU,I,qBAAzEuD,G,MAAaxE,I,aAAUzB,G,SCAYoC,GAAoB,QAAS,CAC5EM,UAAU,EACV7C,QvCqDqB,SAACvI,GAAD,OAAoB3C,EAAS2C,IAAUlC,EAAajC,KAAKmE,M,qBuCvDlE4O,G,MAAezE,I,aAAUzB,G,SCAcoC,GAAoB,W,qBAA3D+D,G,MAA6BnG,I,mBCO9BoG,GAAqB,IAAI/I,KAEpCC,QAEWmE,GAAWzD,aAAcqI,GAAcC,IAAe9M,KACjEgE,cAAI,mCAAErE,EAAF,KAAK4L,EAAL,YAAY5L,GAAK4L,MAGV/H,GAAQ,WACnBuJ,GAAW,IACXC,GAAY,IACZC,GAAc,IACdC,MCmBazG,GA5BQW,IAA2B,SAAAC,GAChD,OAAO,eACFA,EADL,CAEErF,OAAO,eACFqF,EAAOrF,OADN,eAEHJ,GAAiB,CAChB0F,MAAO,gBAGXA,MAAOT,aAAO,CACZU,UAAW,kBAAME,aAAMnE,GAAOtD,KAAK0H,aAAM,CAAEzN,KAAM4H,QACjD4J,YAAa,kBACXhE,aACEQ,GAASjI,KACPgE,cAAI,SAAAqC,GAAO,MAAK,CACdpM,KAAMoM,EAAUxE,GAAkBA,iBAM7CyE,WAAW,CACZpE,QAAS,CACPwJ,WAAY,SAACxE,EAAGvB,GAAJ,OACVtC,GAAkBsC,IAAQiH,GAAmBnJ,KAAKK,OAAO6B,EAAIgG,W,SCsIpDwB,GAnHG,WAAO,IAAD,EACVjM,eAALxD,EADe,sBAEyB0K,qBAAW3B,IAFpC,mBAEfoF,EAFe,KAEA3S,EAFA,KAEMkU,EAFN,KAIhBxN,GADkByI,aAAmBtE,IAAkB,GAC5CsE,aAAmBuE,GAAoB9I,SAClDuC,EAAUgC,aAAmBJ,IAAU,GAE7CxF,GAAiB2K,EAAiB,aAElC,IAAMC,EAA2B7T,WAC/B,kBAlCiC,SAACkE,GAAD,OAAkC,SAAC7D,GAAD,OAIrE,gBAAC,GAAD,iBACMA,EADN,CAEE2S,YAAa3S,EAAMuB,MAAN,aAAoBvB,EAAMuB,MAA1B,KAAqC,KAEjDsC,EAAE,4BA0BG4P,CAA6B5P,KACnC,CAACA,IAGG6P,EAAwB/T,WAC5B,kBA3BgE,SAACK,GAAD,OAIlE,gBAAC,GAAyBA,EACvBsB,EAAStB,EAAMuB,OACZ,sCACA,8BAqBJ,CAACsC,IAOG8P,EAAW,WACf,IAAMC,EAAc,CAClBxT,KAAM4H,GACNnC,SAAS,WAAD,4BAAE,4BAAAC,EAAA,sEACF7C,EAAM,KADJ,cAEF8C,EAAkCM,SAAQ,GAFxC,kBAIDN,GAJC,2CAAF,kDAAC,IAQX1G,EAAKuU,IAGDzB,EAAeH,EAAc7D,QAAQ,cAErCqE,EACJ,wBAAMvR,MAAO,CAAE4S,SAAU,SACvB,gBAAC,GAAD,KACE,gBAAC,KAAD,CAAY/M,IAAK,aAAcjD,EAAE,gBAGnC,gBAAC,GAAD,KACE,gBAAC+O,GAAD,CAAM/L,MAAOhD,EAAEiQ,GAAI,MAAWtP,WAAS,EAACwH,QAAS2H,EAAU9L,UAAWsK,GAAeqB,IAGvF,gBAAC,GAAD,KACE,gBAACX,GAAD,CAAOhM,MAAOhD,EAAEiQ,GAAK,WAAY9H,QAAS2H,EAAU9L,UAAWsK,GAAeuB,IAGhF,gBAAC,GAAD,KACE,gBAACZ,GAAD,CAASjM,MAAOhD,EAAEiQ,GAAI,SAAc9H,QAAS2H,EAAU9L,UAAWsK,KAGpE,gBAAC,GAAD,CAAYlL,YAAU,EAACC,UAAQ,GAC7B,gBAAC,GAAD,KACE,gBAAC,IAAD,CAAQW,UAAW2E,IAAY2F,EAAcvK,QAAM,EAAChD,QAAS+O,GAC1D9P,EAAEiQ,GAAI,UAIX,gBAAC,GAAD,KACE,gBAAC,IAAD,CAAQlP,QAAS+E,IAAQ9F,EAAEiQ,GAAK3B,EAAe,QAAU,eAM3DnR,EAAUmF,eAEdJ,EAEAkE,OAEE1D,mBAASiM,IAET,SAAAuB,GAAW,OACT5N,eAEE4N,EAEA1N,OAEEE,mBACE,2BACG1C,EACCiQ,GACE,kFAMRvN,mBACE,2BACG1C,EACCiQ,GACE,2FAUlB,OACE,gBAAC,EAAD,CAAS1S,QAAS4Q,EAAc7D,QAAQ,eAAgBnN,IC/H/C4L,GAAUW,aAjCD,CACpBzJ,GAAI,SACJwE,QAAS,OACTJ,QAAS,GACTE,GAAI,CACF4L,KAAM,CACJ,CAAEzL,OAAQ,QAASC,KAAM,QACzB,CAAED,OAAQ,SAAUC,KAAM,SAC1B,CAAED,OAAQ,UAAWC,KAAM,UAC3B,CAAED,OAAQ,aAAcC,KAAM,aAC9B,CAAED,OAAQ,UAGdJ,OAAQ,CACN8L,KAAM,GACNC,OAAQ,GACRC,MAAO,GACPC,UAAW,GACXC,IAAK,KAeoC,CAAEhM,QAHxB,GAGiC8E,OAXlC,CACpB8G,KAAM,SAAC5G,EAAYH,GAAb,MAAsC,SAAZA,EAAE7M,OAClC8T,MAAO,SAAC9G,EAAYH,GAAb,MAAsC,UAAZA,EAAE7M,OACnC6T,OAAQ,SAAC7G,EAAYH,GAAb,MAAsC,WAAZA,EAAE7M,OACpC+T,UAAW,SAAC/G,EAAYH,GAAb,MAAsC,eAAZA,EAAE7M,UClBnCiU,GAAW,WAEf,OADA7U,EAAY,OACL,mCAGH8U,GAAW,SAACvU,GAGhB,OAFAP,EAAYO,EAAMN,MAEX,gCAAGM,EAAMkB,WAGZsT,GAAQ,SAAC,GAA+B,IAA7BlV,EAA4B,EAA5BA,MAEf,OAAIA,EAAM6O,QAAQ,QACT,gBAAC,EAAD,CAAUhO,GAAI,UACZb,EAAM6O,QAAQ,SAErB,gBAAC,GAAD,CAAUzO,KAAM,SACd,gBAAC,GAAD,OAGKJ,EAAM6O,QAAQ,aAErB,gBAAC,GAAD,CAAUzO,KAAM,cACd,gBAAC,GAAD,OAGKJ,EAAM6O,QAAQ,OAChB,gBAAC,GAAD,MAGF,gBAAC,EAAD,CAAUhO,GAAI,SAGjBsU,GAAS,CAEb,QACA,SACA,cA0DaC,GApBO,SAAC1U,GAAsC,IAAD,EAChCL,YAAe,GADiB,mBACnDgV,EADmD,KAC5CC,EAD4C,KAS1D,OANAjV,aAAgB,WACd,IAAM+I,EAvCmB,SAACmM,GAC5B,IAAMC,EAAMD,EAAOpR,QAAQ,WAAY,IA+BvC,OA7BkBgR,GAAO3R,QACvB,SAACC,EAAK6G,GACJ,GAAI7G,EAAIW,MACN,OAAOX,EACF,GAAI6G,aAAgBmL,QACrBnL,EAAK9J,KAAKgV,GAAM,CAClB,IAAME,EAAUpL,EAAKqL,KAAKH,GAE1B,GAAIE,EAAS,CACX,IAAME,EAASF,EAAQE,QAAU,GAE3B7U,EAAQwC,OAAOF,KAAKuS,GACvBpS,QAAO,SAACqS,EAAMlT,GACb,IAAMV,EAAQ2T,EAAOjT,GACrB,OAAOkT,EAAK1R,QAAL,WAAiBlC,GAAS,MAChCyT,EAAQI,OACV3R,QAAQ,MAAO,KACfA,QAAQ,UAAW,IAEtB,MAAO,CAAEC,OAAO,EAAMgF,MAAM,aAAGtI,KAAM,OAAQC,SAAU6U,KAK7D,OAAOnS,IAET,CAAEW,OAAO,EAAOgF,MAAO,CAAEtI,KAAM,OAAQC,MAAO,UA1BxCqI,MAoCQ2M,CAAqBzV,IAAQ0V,SAASC,UACpDvV,EAAMX,KAAKqJ,GACXkM,GAAS,KACR,CAAC5U,EAAMX,OAELsV,EAKH,gCACE,gBAAC,GAAD,CAAOrV,MAAOU,EAAMV,SALf,MCzDIkW,GATF,SAACxV,GACZ,IACM4E,EADUjF,aAAiBR,GACTE,KAAKyL,KAAK,KAAlB,aAA0B1K,KAAM,OAAQC,MAAOL,EAAMG,IAAOH,EAAM8Q,aAAUzP,GAE5F,OAAOrB,EAAMkB,SAAS,CAAC0D,aCnBV,cAAO,IAAD,EACY2J,qBAAW3B,IADvB,mBACZtN,EADY,KACLD,EADK,KACCwJ,EADD,KAGnBD,GAAiBC,EAAS,gBAC1B,IAAM4M,EAAkBjH,aAAmBtE,IAAkB,GAE7D,OACE,gBAAC/K,EAAYI,SAAb,CAAsBgC,MAAO,CAAEjC,QAAOD,SACpC,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,gBAAC,IAAD,iBAIN,gBAAC,IAAD,MACA,uBAAKyB,UAAU,WACb,gBAAC,GAAD,CAAMX,GAAG,SACN,gBAAGyE,EAAH,EAAGA,QAAH,OACC,gBAAC,IAAD,CACEiL,KAAM,OACNC,MAAOxQ,EAAM6O,QAAQ,QAAU,CAAC,eAAiB,GACjDvJ,QAASA,EACT8Q,WAAYpW,EAAM6O,QAAQ,QAC1BwH,UAAWrW,EAAM6O,QAAQ,SAL3B,WAWJ,gBAAC,GAAD,CAAMhO,GAAG,UACN,gBAAGyE,EAAH,EAAGA,QAAH,OACC,gBAAC,IAAD,CACEkL,MAAOxQ,EAAM6O,QAAQ,SAAW,CAAC,eAAiB,GAClDvJ,QAASA,EACT8Q,WAAYpW,EAAM6O,QAAQ,SAC1BwH,UAAWrW,EAAM6O,QAAQ,UAJ3B,YAUJ,gBAAC,GAAD,CAAMhO,GAAG,eACN,gBAAGyE,EAAH,EAAGA,QAAH,OACC,gBAAC,IAAD,CACAkL,MAAO2F,GAAmBnW,EAAM6O,QAAQ,QAAU,CAAC,eAAiB,GAClEvJ,QAASA,EACTiD,UAAW4N,EACXC,WAAYpW,EAAM6O,QAAQ,aAC1BwH,UAAWrW,EAAM6O,QAAQ,cAL3B,kBAYN,gBAAC,GAAD,CAAQ9O,KAAMA,EAAMC,MAAOA,MCtE3BsW,GAAK,WAAO,IAAD,EACEvO,eAARwO,EADM,oBAUf,OAPAlW,IAAMmJ,WAAU,WACd+M,EAAKC,eAAe,MACpBzS,YAAW,WACTwS,EAAKC,eAAe,QACnB,QACF,CAACD,IAEG,MAYME,GATO,WACpB,OACE,kBAAC,WAAD,CAAUC,SAAS,OACf,kBAAC,GAAD,MACA,kBAAC,GAAD,QCZYC,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASzS,MACvB,2D,+BCTNmS,KAGG/O,IAAIsP,MAGJtP,IAAIuP,MAEJvP,IAAIwP,MAGJC,KAAK,CACJC,YAAa,KACbC,OAAO,EACPC,QAAS,CACPC,SAAS,GAAD,OAAKhR,qBAAL,iCAEViR,cAAe,CACbC,aAAa,KAKJhB,GAAf,ECxBAiB,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SFmI3C,kBAAmBC,WACrBA,UAAUC,cAAcxC,MAAMyC,MAAK,SAAAC,GACjCA,EAAaC,iB,yjCG5InBC,EAAOC,QAAU,CAAC,aAAa,8BAA8B,yBAAyB,0CAA0C,uBAAuB,0C,mBCAvJD,EAAOC,QAAU,CAAC,QAAU,2B","file":"static/js/main.e5c23cfd.chunk.js","sourcesContent":["/**\n * @packageDocumentation\n * @module utils\n */\n\n /**\n * ```hs\n * negate :: (a -> b) -> a -> Bool\n * ```\n *\n * Transforms a function from `a -> b` to `a -> boolean` by casting\n * it's result.\n * \n * Example:\n * \n * ```ts\n * const trim = (value: string) => value.trim();\n * \n * const isEmpty = negate(trim)\n * \n * ```\n * @param f The function of which the result is negated.\n * @typeparam T The function argument\n */\nexport const negate = <T>(f: (value: T) => any): (value: T) => boolean => value => !f(value)","import { Interpreter, State } from 'xstate'\nimport { createContext } from 'react'\n\nexport type StateMachineContext = { send: Interpreter<any, any, any, any>['send'], state: State<any, any> }\n\nexport const SendContext = createContext<StateMachineContext>({\n  send: (() => {}) as any,\n  state: {} as any\n});\n\nexport const { Provider, Consumer } = SendContext","/**\n * @packageDocumentation\n * @module router\n */\nimport * as React from 'react'\nimport history from 'history/browser'\n\n/**\n * React hook for updating the browser's address\n * bar with a location.\n * \n * Example:\n * \n * ```tsx\n * const TodosApp = () => {\n *  useLocation('todos')\n * \n *  <ul>..</ul>\n * }\n * ```\n * \n * @param path The url or path\n */\nexport const useLocation = (path: string) => {\n  React.useEffect(() => {\n    history.push(/^\\//.test(path) ? path : `/${path}`);\n  }, [path]);\n}","/**\n * @packageDocumentation\n * @module router\n */\nimport * as React from \"react\";\n\nimport { SendContext, StateMachineContext } from \"../../components/SendContext\";\n\n/**\n * Render prop function used by [[Redirect]]\n * @internal\n */\nexport const RedirectWithSend = (props: PropsRedirect & Pick<StateMachineContext, 'send'>) => {\n  React.useEffect(() => {\n    console.warn(`Redirecting to: ${props.to}`)\n    props.send({ type: \"GOTO\", route: `${props.to}` });\n  }, [props.to, props.send]);\n\n  return null;\n};\n\n/**\n * React prop types for the [[Redirect]] component.\n */\nexport interface PropsRedirect {\n  /** Path or url to redirect to */\n  to: string;\n}\n\n/**\n * Transitions the router's state machine to a given path or url.\n * @param props See [[PropsRedirect]]\n */\nconst Redirect = (props: PropsRedirect) => {\n  const { send } = React.useContext(SendContext);\n\n  return (\n    <RedirectWithSend {...props} send={send} />\n  );\n}\n\nexport default Redirect;\n","import classes from './Content.module.scss'\n\nimport * as React from \"react\";\n\nimport LinearProgress from \"../LinearProgress\";\n\nconst styles: React.CSSProperties = {\n  flex: \"1 1 auto\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\n\nconst Content = (props: { children: React.ReactNode; loading?: boolean }) => (\n  <>\n    <div className={classes.content} style={styles}>{props.children}</div>\n    <LinearProgress progress={props.loading ? undefined : 0} />\n  </>\n);\n\nexport default Content","/**\n * @packageDocumentation\n * @module utils\n */\n\n /**\n * ```\n * isTruthy :: a -> boolean\n * ```\n * \n * Chcecks if a value is truthy. For numberic values\n * `Infinite` and `NaN` are considered non-truthy.\n * \n * @param value The value to be checked.\n * @typeparam T The type of the value.\n */\nexport const isTruthy = <T>(value?: T): value is T => {\n  if (value) {\n    if (typeof value === 'string') {\n      return !!value.trim()\n    } else if (typeof value === 'number') {\n      return !isNaN(value) && value !== Infinity && (value > 0 || value < 0)\n    } else if (Array.isArray(value)) {\n      return value.length > 0\n    }\n\n    return !!value;\n  }\n\n  return false\n}\n\n/**\n * ```hs\n * isNotNull :: a -> boolean\n * ```\n * \n * Type guard. Checks if a nullable value is null or not.\n * \n * @param value The nullable value to be checked.\n * @typeparam T The type of the value\n * @returns Asserts that the value is not of type `null`\n */\nexport const isNotNull = <T>(value: T | null): value is T => value != null\n\n/**\n * Regular expression for testing e-mail addresses\n */\nexport const emailPattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\n\n/**\n * ```hs\n * isEmail :: String -> Bool\n * ```\n * \n * Tests a string agains [[emailPattern]] to see if it is a valid e-mail address.\n * \n * @param email \n */\nexport const isEmail = (email?: string) => isTruthy(email) && emailPattern.test(email)","/**\n * @packageDocumentation\n * @module utils\n */\n\n/**\n * Type that describes a function that returns\n * the value of on object's property given\n * \n * @typeparam TKey The key or property name the function should read and return from a given object.\n * @typeparam TValue The value type\n * @typeparam TObject The object type\n */\nexport type Getter<TKey extends string> = <\n  TValue,\n  TObject extends {\n    [P in TKey]: TValue;\n  }\n>(\n  o: TObject\n) => TObject[TKey];\n\n/**\n * \n * @param key \n */\nexport const getter = <K extends string>(key: K): Getter<K> => <\n  T,\n  O extends { [P in K]: T }\n>(\n  o: O\n) => o[key];\n\nexport const getter2 = <K1 extends string, K2 extends string>(\n  k1: K1,\n  k2: K2\n) => <T, O extends { [P in K1]: { [R in K2]: T } }>(o: O) => o[k1][k2];\n\n\nexport const getEventCurrentTargetValue = getter2(\"currentTarget\", \"value\")\n\nexport const dot = getter\n\nexport const dot2 = getter2","/**\n * @packageDocumentation\n * @module utils\n */\n\n /**\n * ```hs\n * forward :: (a -> b) -> a -> a\n * ```\n * \n * Transforms a function with a signature of `a -> b` into an\n * identity function of `a`\n * \n * Example:\n * \n * ```ts\n * declare const dispatch = (event: Event) => void\n * \n * const eventIdentity = forward(dispatch)\n * \n * const event: Event = eventIdentity(new Event())\n * ```\n * \n * \n * @param f The function \n */\nexport const forward = <T>(f: (value: T) => any): (value: T) => T => value => {\n  f(value);\n  return value;\n};\n\n/**\n * ```hs\n * returnSecond :: a -> b -> b\n * ```\n * \n * Returns the second argument given.\n * \n * Example:\n * \n * ```ts\n * import { flow } from 'fp-ts/lib/functions'\n * \n * const double: (a: any, b: number) => number = flow(\n *   returnSecond,\n *   (n: number) => n * 2\n * )\n * \n * const result = double(\"Anything here\", 10) // 20\n * \n * const promiseThatRejects = new Promise<13>(\n *   flow(returnSecond, reject => reject())\n * )\n * \n * ```\n * \n * As you can see, `returnSecond` is especially helpful in combination with\n * `fp-ts`' `flow` function.\n * \n * \n * @param _ Anything, first argument is ignored\n * @param t Second argument that is also returned.\n * @returns The second argument.\n * @typeparam T The type of the second argument.\n */\nexport const returnSecond = <T>(_: any, t: T, ...rest: any[]) => t;\n\n/**\n * ```hs\n * voidFn :: ()\n * ```\n * \n * A void function. A lazy volue of nothing!\n * It takes nothing. It does nothing. It's useless.\n * \n */\nexport const voidFn = () => {};\n\n/**\n * ```hs\n * returnLast :: (a -> b) -> (a -> c) -> a -> c\n * ```\n * \n * Takes 2 functions that both accept the same argument and \n * executes both but only returns the value of the second\n * function.\n * \n * Example:\n * \n * ```ts\n * \n * import { identity } from 'fp-ts/lib/functions'\n * \n * declare const update: (value: string) => void\n * \n * const updateAndReturn = returnLast(update, identity)\n * ```\n * \n * @param f1 The first function that is called.\n * @param f2 The second function whos return value is returned.\n * @typeparam A The type of the incoming value passed to both f1 and f2.\n * @typeparam B The return type of the second function.\n * @returns A function that takes argument `A` and returns the result of the second function.\n */\nexport const returnLast = <A, B>(f1: (a: A) => any, f2: (a: A) => B): (a: A) => B => (\n  a: A\n) => {\n  f1(a);\n  return f2(a);\n};\n\n\n","/**\n * @packageDocumentation\n * @module utils\n */\n\n/**\n * Removes the leading and trailing white space and line terminator characters from a string.\n */\nexport const trim = (value: string) => value.trim()","/**\n * @packageDocumentation\n * @module utils\n */\n\nimport { NeededUnionType } from \"../types\";\n\n/**\n * Return type of the [[pick]]. A function that takes object O\n * and picks keys  K from it.\n * \n *  * Example:\n * \n * ```ts\n * const { a, b } = pick('a', 'b')({ a: 12, b: true, c: \"hello\"})\n * \n * ```\n * \n * @typeparam K List of keys of object O\n * @typeparam O The object to pick keys K from.\n */\nexport type Picker<K extends string[]> = <\n  O extends { [P in NeededUnionType<K>]: any }\n>(\n  object: O\n) => Pick<O, NeededUnionType<K>>;\n\n/**\n * Pick a set of key/values from an object.\n * \n * Example:\n * \n * ```ts\n * const { a, b } = pick('a', 'b')({ a: 12, b: true, c: \"hello\"})\n * ```\n * \n * @param keys List of keys to be picked.\n * @typeparam K List of keys of object O\n * @returns `pick` is curried. It returns a function that takes the object to pick from.\n */\nexport const pick = <K extends string[]>(...keys: K): Picker<K> => object =>\n  Object.keys(object).reduce((acc, key) => {\n    if (keys.includes(key)) {\n      acc[key] = object[key as keyof object];\n    }\n\n    return acc;\n  }, {} as any);\n","/**\n * @packageDocumentation\n * @module utils\n */\n\n/**\n * ```hs\n * delay :: number -> Promise ()\n * ```\n * \n * Creates a promise that resolves after n milliseconds. Defaults to 1s.\n * \n * @param ms Milliseconds to delay the promise by. Defaults to 1s.\n * @returns A promise\n */\nexport const delay = (milliseconds = 1000) => new Promise(resolve => setTimeout(resolve, milliseconds));\n\nexport default delay\n\n","/**\n * ### Utilities\n * \n * #### Assertion\n * \n * - [[isTruthy]]\n * - [[isNotNull]]\n * - [[emailPattern]]\n * - [[isEmail]]\n * \n * #### Getters\n * \n * - [[Getter]]\n * - [[getter]]\n * - [[getter2]]\n * - [[getEventCurrentTargetValue]]\n * - [[dot]]\n * - [[dot2]]\n * \n * #### Functions\n * \n * - [[forward]]\n * - [[returnSecond]]\n * - [[voidFn]]\n * - [[returnLast]]\n * \n * #### Strings\n * \n * - [[trim]]\n * \n * #### Booleans\n * \n * - [[negate]]\n * \n * #### Objects\n * \n * [[Picker]]\n * [[pick]]\n * \n * #### Other\n * \n * - [[delay]]\n * - [[prefixer]]\n * - [[format]]\n * \n * @packageDocumentation\n * @module utils\n * @preferred\n * \n * This is the preferred documentation for utils.\n */\n\nexport * from './assert'\nexport * from './getters'\nexport * from './functions'\nexport * from './strings'\nexport * from './booleans'\nexport * from './objects'\nexport { default as prefixer } from './prefixer'\nexport { default as delay } from './delay'\n\n/**\n * format\n * @param str \n * @param args \n */\nexport const format = (str: string, ...args: any[]) => {\n  return str.replace(/%(\\d+)/g, (match, number) => { \n    return typeof args[number] != 'undefined'\n      ? args[number]\n      : match\n    ;\n  });\n};\n","/**\n * @packageDocumentation\n * @module user\n */\nimport * as t from 'io-ts'\n\n/**\n * Runtime type decoder for user models.\n * \n * Example:\n * \n * ```ts\n * const fetchUser = async (): Promise<Either<Errors, User>> => {\n *    const response = await fetch(\"/user/4\")\n *    const json = await response.json()\n * \n *    const userOrError: Either<Errors, User> = User.decode(json)\n * \n *    return userOrError\n * }\n * ```\n * \n */\nexport const User = t.type({\n  id: t.number,\n  name: t.string,\n  username: t.string,\n  email: t.string,\n}, 'User')\n\n/**\n * User\n * \n * ```ts\n * type User = {\n *  id: number\n *  name: string\n *  username: string\n *  email: string\n * }\n * ```\n */\nexport type User = t.TypeOf<typeof User>\n","/**\n * Model: User\n * @packageDocumentation\n * @module user\n * @preferred\n */\nimport { getter } from '../../utils'\n\nexport * from './types'\n\n/**\n * Given a [[User]] returns it's id\n * \n */\nexport const getId = getter('id')\n\n/**\n * Given a [[User]] returns it's username\n * \n */\nexport const getUsername = getter('username')\n","import * as React from \"react\";\n\nimport { User, getUsername } from \"../../models/users\";\n\nimport { format } from \"../../utils\";\n\nimport text from \"./text.json\";\n\nexport interface PropsWelcomeMessage {\n  user: User;\n}\n\nconst WelcomeMessage = (props: PropsWelcomeMessage) => (\n    <div id=\"welcome\">\n      {format(text[\"Welcome %username\"], getUsername(props.user))}\n    </div>\n);\n\nexport default WelcomeMessage","import * as React from \"react\";\n\n// Components\nimport Button from \"../../../modules/components/input-controls/Button\";\n\n// Modules\nimport { PropsOf } from \"../../../modules/types\";\n\nexport interface PropsResetButton\n  extends Omit<PropsOf<typeof Button>, \"onClick\" | \"children\"> {\n  children: React.ReactNode;\n  onClick: () => void;\n  takeFocus?: boolean;\n}\n\nconst ResetButton = (props: PropsResetButton) => {\n  const ref = React.useRef<HTMLButtonElement | null>(null);\n\n  React.useLayoutEffect(() => {\n    if (props.takeFocus) {\n      setTimeout(\n        () => {\n          ref.current?.focus()\n        },\n        250\n      );\n    }\n  }, [props.takeFocus, ref.current]);\n\n  return (\n    <Button\n      ref={ref}\n      data-test=\"btn-reset\"\n      // disabled={props.disabled}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </Button>\n  );\n};\n\nexport default ResetButton;\n","/**\n * ## q\n *\n * Wrapper around `fetch` for type safe network requests\n * using `io-ts` and `fp-ts` utilities and types.\n *\n * ### Example\n *\n * ```ts\n * import * as t from 'io-ts'\n *\n * const User = t.type({\n *   id: t.number,\n *   name: t.string,\n *   username: t.string,\n *   email: t.string,\n * }, 'User')\n *\n *\n * const requestUserById = (id: number): Promise<Response> => fetch('http://www.example.com/api/v1/user/' + id)\n *\n * const fetchUserById= (id: number): Promise<Either<Failure, User>>\n *    => q(User)(() => requestUserById(id))\n *\n * const result: Either<Failure, User> = await fetchUserById(334)\n * ```\n * \n * The [[Failure]] type describes three possible ways a network request can fail:\n * \n * - Reason: \"api\", The response shape matched some pre-determined protocol for communicating error messages.\n * - Reason: \"decode\", The decoder was unable to parse the response indicating bad data.\n * - Reason: \"error\", Something went really wrong, bug in the code, network down, etc.\n * \n * ```\n *\n * @packageDocumentation\n * @module q\n * @preferred\n */\n\nimport * as t from \"io-ts\";\nimport * as E from \"fp-ts/lib/Either\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { randomInt } from \"fp-ts/lib/Random\";\nimport delay from \"../../utils/delay\";\n\nimport { constant, identity } from \"fp-ts/lib/function\";\n\n/**\n * Runtime type decoder for parsing API failure responses.\n */\nconst ApiFailure = t.type({\n  code: t.number,\n  error: t.string\n});\n\n/**\n *  Describes a standarized API failure reponse.\n *\n * ```ts\n * type ApiFailure = {\n *   code: number\n *   error: string\n * }\n * ```\n */\nexport type ApiFailure = t.TypeOf<typeof ApiFailure>;\n\n/**\n * Type literal describing the reason of a network request failure.\n */\nexport type ReasonApi = \"api\";\n\n/**\n * Constant of the type literal with the same name. See [[ReasonApi]]\n */\nexport const ReasonApi: ReasonApi = \"api\";\n\n/**\n * Type literal describing the reason of a network request failure.\n */\nexport type ReasonDecode = \"decode\";\n\n/**\n * Constant of the type literal with the same name. See [[ReasonDecode]]\n */\nexport const ReasonDecode: ReasonDecode = \"decode\";\n\n/**\n * Type literal describing the reason of a network request failure.\n */\nexport type ReasonError = \"error\";\n\n/**\n * Constant of the type literal with the same name. See [[ReasonError]]\n */\nexport const ReasonError: ReasonError = \"error\";\n\n/**\n * Union of type literals describing the reasons a netowrk request may fail with.\n */\nexport type Reason = ReasonApi | ReasonDecode | ReasonError;\n\n/**\n * A network request can fail due to:\n *\n * #### Reason: \"api\"\n *\n * This type of failure describes an API response with\n * failure information following a specific protocol. For\n * example a bad username or password or maybe  the database\n * connection failed.\n *\n * `t.Errors` is the error response provided by `io-ts`\n *\n * ```ts\n * { reason: \"api\"; error: t.Errors }\n * ```\n *\n * #### Reason: \"error\"\n *\n * An error type for all other cases. Usually when a there is\n * a bug in the code or the network is down.\n *\n * ```ts\n * { reason: \"error\"; error: Error }\n * ```\n *\n */\nexport type Failure =\n  /** The network returns a reponse decribing an error. */\n  | { reason: ReasonApi; error: ApiFailure }\n  /** The type decoder failed to parse the response. (Bad data) */\n  | { reason: ReasonDecode; error: t.Errors }\n  /** A critical error occurred (Netork down) */\n  | { reason: ReasonError; error: Error };\n\n/**\n * The reponse type for this module. It is either\n * a \"Right\" response of TModel or a \"Left\" of some type of [[Failure]]\n */\nexport type QResponse<TModel> = E.Either<Failure, TModel>;\n\n/**\n * Asserts a [[Failure]] value of a specific reason type.\n *\n * @param reason \"api\", \"decode\", or \"failure\"\n */\nconst isFailureReason = <R extends Reason>(reason: R) => (\n  failure: Failure\n): failure is Extract<Failure, { reason: R }> => failure.reason === reason;\n\n/**\n * Make a function for creating failure objects of type [[Failure]] of speicifc reason.\n *\n * @internal\n * @param reason \"api\", \"decode\", or \"failure\"\n */\nconst makeCreateFailure = <R extends Reason>(reason: R) => (\n  error: Extract<Failure, { reason: R }>[\"error\"]\n): Failure => ({ reason, error } as any);\n\n/**\n * Create a [[Failure]] object with reason: \"api\"\n */\nexport const createApiFailure = makeCreateFailure(ReasonApi);\n/**\n * Create a [[Failure]] object with reason: \"decode\"\n */\nexport const createDecodeFailure = makeCreateFailure(ReasonDecode);\n/**\n * Create a [[Failure]] object with reason: \"error\"\n */\nexport const createErrorFailure = makeCreateFailure(ReasonError);\n\n/**\n * Asserts that a given [[Failure]] object is of reason: \"api\"\n */\nexport const isApiFailure = isFailureReason(ReasonApi);\n\n/**\n * Asserts that a given [[Failure]] object is of reason: \"decode\"\n */\nexport const isDecodeFailure = isFailureReason(ReasonDecode);\n\n/**\n * Asserts that a given [[Failure]] object is of reason: \"error\"\n */\nexport const isErrorFailure = isFailureReason(ReasonError);\n\n/**\n * Functon that takes a lazy promise of a network response and returns\n * a promise of a [[QResponse]]\n */\nexport type QFetch<TModel> = (\n  promiser: () => Promise<Response>\n) => Promise<QResponse<TModel>>;\n\n/**\n *\n */\nexport type Q = <TModel>(decoder: t.Type<TModel>) => QFetch<TModel>;\n\n/**\n * Wrapper for making type safe promise based network requests that can fail.\n *\n * @param decoder JSON response decoder created using io-ts\n * @returns A function that takes a function that returns a promise and returns a response.\n */\nexport const q: Q = <TModel>(decoder: t.Type<TModel>): QFetch<TModel> => {\n  /**\n   * Mock failure reasons\n   * Code is tree-shaken in production builds:\n   */\n  if (\n    process.env.REACT_APP_DISABLE_Q_SHUFFLE !== \"TRUE\" &&\n    process.env.NODE_ENV === \"development\" &&\n    process.env.REACT_APP_E2E !== \"on\"\n  ) {\n    var shuffle = [1, 2, 3, 4];\n  }\n\n  return async (\n    promiser: () => Promise<Response>\n  ): Promise<QResponse<TModel>> => {\n    await delay(2000);\n\n    try {\n      const response = await promiser();\n      let json = await response.json();\n\n      /**\n       * Mock failure reasons\n       * Code is tree-shaken in production builds:\n       */\n      if (\n        process.env.REACT_APP_DISABLE_Q_SHUFFLE !== \"TRUE\" &&\n        process.env.NODE_ENV === \"development\" &&\n        process.env.REACT_APP_E2E !== \"on\"\n      ) {\n        // Iterate through all possible failure cases in development mode\n        const i = shuffle.shift();\n        i != null && shuffle.push(i);\n\n        if (i === 2) {\n          // Simulate ApiFailure\n          json = {\n            code: randomInt(0, 100)(),\n            error: \"Invalid username or password\"\n          };\n        } else if (i === 3) {\n          // Simulate Error\n          throw Error(\".. my hands up in the air sometime!\");\n        } else if (i === 4) {\n          // Simulate decoding error\n          delete json.username;\n        }\n      }\n      /**\n       * End of Mock failure reasons\n       */\n\n      return pipe(\n        // Try to decode the incoming JSON with the given type decoder\n        decoder.decode(json),\n        // Map failure of the decoding process:\n        E.mapLeft(\n          (decodeError): Failure =>\n            pipe(\n              ApiFailure.decode(json),\n              // First try to decode the json as an ApiFailure\n              E.map(createApiFailure),\n              // But if that fails keep the initial decoding failure\n              E.fold(constant(createDecodeFailure(decodeError)), identity)\n            )\n        )\n      );\n    } catch (error) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.error(error);\n      }\n\n      return E.left(\n        createErrorFailure(error instanceof Error ? error : Error(`${error}`))\n      );\n    }\n  };\n};\n\nexport default q;\n","import * as React from \"react\";\n\nimport { Failure, isApiFailure, isDecodeFailure } from \"../../apis/q\";\nimport { format } from \"../../utils\";\n\nexport interface PropsFailureMessage {\n  failure: Failure;\n  error?: string;\n  decode?: string;\n  api?: string;\n}\n\nconst f = (str?: string, ...args: any[]) => (str ? format(str, ...args) : null);\n\nconst FailureMessage = (props: PropsFailureMessage) => {\n  const failureMessage = isApiFailure(props.failure)\n    ? f(props.api, props.failure.error.code, props.failure.error.error)\n    : isDecodeFailure(props.failure)\n    ? f(props.decode)\n    : f(props.error, props.failure.error);\n\n  return failureMessage ? <span data-test=\"FailureMessage\">{failureMessage}</span> : null\n};\n\nexport default FailureMessage","import * as React from \"react\";\n\nimport CFailureMessage from \"../../../modules/components/FailureMessage\";\nimport { Failure } from \"../../../modules/apis/q\";\n\nimport text from './text.json'\n\nexport interface PropsFailureMessage {\n  failure: Failure;\n}\n\nconst FailureMessage = (props: PropsFailureMessage) => (\n  <CFailureMessage\n    failure={props.failure}\n    api={text[\"The server responded with code %code\"]}\n    decode={text[\"The server has responded with an unknown response.\"]}\n    error={text[\"The following error has occurred\"]}\n  />\n);\n\nexport default FailureMessage\n","import * as React from \"react\";\n\nimport classes from \"./FormField.module.scss\";\n\nimport Typography from '../Typography'\n\nexport interface PropsFormField {\n  label?: React.ReactNode;\n  children?: React.ReactNode;\n}\n\nexport const FormField = (props: PropsFormField) => (\n  <div className={classes[\"form-field\"]}>\n    {props.label ?? <Typography use={'subtitle2'}>{props.label}</Typography>}\n    {props.children}\n  </div>\n);\n\ninterface PropsFormFields {\n  horizontal?: boolean;\n  centered?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const FormFields = (props: PropsFormFields) => {\n  const classNames = []\n\n  props.horizontal && classNames.push(classes[\"form-fields-horizontal\"])\n  props.centered && classNames.push(classes[\"form-fields-centered\"])\n\n  return (\n    <div className={classNames.join(' ')}>\n      {props.children}\n    </div>\n  );\n};\n","import * as React from \"react\";\n\nimport text from \"./text.json\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormField, FormFields } from \"../FormField\";\n\nimport Typography from '../Typography'\n\nexport interface PropsLoginForm {\n  usernameInput: React.ReactNode;\n  passwordInput: React.ReactNode;\n  loginButton: React.ReactNode;\n  resetButton?: React.ReactNode;\n}\n\nconst LoginForm = (props: PropsLoginForm) => {\n  const [t] = useTranslation();\n\n  return (\n    <form>\n      <FormField><Typography use={'headline6'}>{`[${t(text.titleOfShow)}]`}</Typography></FormField>\n      <FormField>{props.usernameInput}</FormField>\n      <FormField>{props.passwordInput}</FormField>\n      <FormFields horizontal centered>\n        <FormField>{props.loginButton}</FormField>\n        <FormField>{props.resetButton}</FormField>\n      </FormFields>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import * as React from \"react\";\n\nimport Button from \"../../../modules/components/input-controls/Button\";\nimport { PropsOf } from \"../../../modules/types\";\n\nimport text from './text.json'\n\nexport interface PropsLoginButton extends PropsOf<typeof Button> {\n  disabled: boolean;\n  onClick: () => void;\n}\n\nconst LoginButton = (props: PropsLoginButton) => (\n  <Button  \n    {...props}\n    raised\n    data-test=\"btn-login\"\n    disabled={props.disabled}\n    onClick={props.onClick}\n  >\n    {text.Login}\n  </Button>\n);\n\nexport default LoginButton;\n","import {\n  MachineOptions as XStateMachineOptions,\n  MachineConfig as XStateMachineConfig,\n  StateSchema as XStateStateSchema,\n  State as XState,\n  Typestate\n} from \"xstate\";\n\nexport const StateTypeEdit= \"edit\" as const;\nexport const StateTypePristine = \"pristine\" as const;\nexport const StateTypeDirty = \"dirty\" as const;\nexport const StateTypeTouched = \"touched\" as const;\nexport const StateTypeTouching = \"touching\" as const;\nexport const StateTypeUntouched = \"untouched\" as const;\nexport const StateTypeFocused = \"focused\" as const;\nexport const StateTypeBlurred = \"blurred\" as const;\nexport const StateTypeValid = \"valid\" as const;\nexport const StateTypeInvalid = \"invalid\" as const;\n\nexport const StateType = {\n  Edit: StateTypeEdit,\n  Pristine: StateTypePristine,\n  Dirty: StateTypeDirty,\n  Touched: StateTypeTouched,\n  Touching: StateTypeTouching,\n  Untouched: StateTypeUntouched,\n  Focused: StateTypeFocused,\n  Blurred: StateTypeBlurred,\n  Valid: StateTypeValid,\n  Invalid: StateTypeInvalid\n};\n\nexport const EventTypeChange: \"CHANGE\" = \"CHANGE\";\nexport const EventTypeFocus: \"FOCUS\" = \"FOCUS\";\nexport const EventTypeBlur: \"BLUR\" = \"BLUR\";\nexport const EventTypeReset: \"RESET\" = \"RESET\";\n\n/**\n * Dictionary of input control state event types.\n */\nexport const EventType = {\n  Change: EventTypeChange,\n  Focus: EventTypeFocus,\n  Blur: EventTypeBlur,\n  Reset: EventTypeReset\n};\n\n/**\n * Events dispatched for the input control state machine.\n */\nexport type Event<T> =\n  | {\n      type: typeof EventType.Change;\n      value?: T | undefined;\n      isRobot?: boolean;\n    }\n  | { type: typeof EventType.Focus }\n  | { type: typeof EventType.Blur }\n  | { type: typeof EventType.Reset };\n\n\n  export type ChangeEvent<T> = Extract<Event<T>, { type: typeof EventType.Change }>;\n  export type FocusEvent= Extract<Event<any>, { type: typeof EventType.Focus }>;\n  export type BlurEvent= Extract<Event<any>, { type: typeof EventType.Blur }>;\n  export type ResetEvent= Extract<Event<any>, { type: typeof EventType.Reset }>;\n\n\nexport type Context<T> = { value?: T | undefined }\n\n/**\n * Possible states for the input control machine.\n *\n * @typeparam T See [[Context.value]]\n */\nexport interface TypeState<T> {\n  /** The input contorl state's context type */\n  context: Context<T>;\n  /** The input contorl state's value */\n  value: {\n    [StateType.Pristine]: typeof StateType.Dirty | typeof StateType.Pristine;\n    [StateType.Touched]:\n      | typeof StateType.Touched\n      | typeof StateType.Touching\n      | typeof StateType.Untouched;\n    [StateType.Focused]: typeof StateType.Focused | typeof StateType.Blurred;\n    [StateType.Valid]: typeof StateType.Valid | typeof StateType.Invalid;\n  };\n}\n\nexport interface StateSchema<T> extends XStateStateSchema<Context<T>> {\n  context: {};\n  states: {\n    [StateType.Pristine]: {\n      states: {\n        [StateType.Pristine]: {};\n        [StateType.Dirty]: {};\n      };\n    };\n    [StateType.Touched]: {\n      states: {\n        [StateType.Untouched]: {};\n        [StateType.Touching]: {};\n        [StateType.Touched]: {};\n      };\n    };\n    [StateType.Valid]: {\n      states: {\n        [StateType.Invalid]: {};\n        [StateType.Valid]: {};\n      };\n    };\n    [StateType.Focused]: {\n      states: {\n        [StateType.Focused]: {};\n        [StateType.Blurred]: {};\n      };\n    };\n  };\n}\n\nexport interface EventCreators<E> {\n  reset: () => E\n}\n\nexport type MachineOptions<T> = Partial<\n  XStateMachineOptions<Context<T>, Event<T>>\n>;\n\nexport type MachineConfig<\n  T,\n> = XStateMachineConfig<Context<T>, StateSchema<T>, Event<T>>;\n\nexport type State<T> = XState<Context<T>, Event<T>, StateSchema<T>, TypeState<T>>","import {\n  createMachine as createXStateMachine,\n  MachineConfig,\n  State,\n  assign\n} from \"xstate\";\n\nimport {\n  StateType,\n  EventType,\n  Event,\n  ChangeEvent,\n  FocusEvent,\n  BlurEvent,\n  ResetEvent,\n  Context,\n  StateSchema,\n  TypeState\n} from \"./types\";\n\n/**\n * Raw configuration for input control state machines\n */\nexport const configuration: MachineConfig<any, any, Event<any>> = {\n  type: \"parallel\" as \"parallel\",\n  context: {},\n  states: {\n    [StateType.Edit]: {\n      on: {\n        [EventType.Change]: {\n          actions: \"assignValue\"\n        }\n      }\n    },\n    [StateType.Pristine]: {\n      initial: StateType.Pristine,\n      states: {\n        [StateType.Pristine]: {\n          on: {\n            [EventType.Change]: {\n              target: StateType.Dirty,\n              cond: \"isHuman\"\n            }\n          }\n        },\n        [StateType.Dirty]: {\n          on: {\n            [EventType.Reset]: StateType.Pristine\n          }\n        }\n      }\n    },\n    [StateType.Touched]: {\n      initial: StateType.Untouched,\n      states: {\n        [StateType.Untouched]: {\n          on: {\n            [EventType.Focus]: {\n              target: StateType.Touching\n            }\n          }\n        },\n        [StateType.Touching]: {\n          on: {\n            // [EventType.Reset]: StateType.Untouched,\n            [EventType.Blur]: {\n              target: StateType.Touched\n            }\n          }\n        },\n        [StateType.Touched]: {\n          on: {\n            [EventType.Reset]: StateType.Untouched\n          }\n        }\n      }\n    },\n    [StateType.Valid]: {\n      initial: StateType.Invalid,\n      states: {\n        [StateType.Invalid]: {\n          on: {\n            \"\": {\n              target: StateType.Valid,\n              cond: \"isValid\"\n            },\n            [EventType.Change]: {\n              target: StateType.Valid,\n              cond: \"isValid\"\n            }\n          }\n        },\n        [StateType.Valid]: {\n          on: {\n            [EventType.Change]: {\n              target: StateType.Invalid,\n              cond: \"isNotValid\"\n            },\n            [EventType.Reset]: StateType.Invalid\n          }\n        }\n      }\n    },\n    [StateType.Focused]: {\n      initial: StateType.Blurred,\n      states: {\n        [StateType.Focused]: {\n          on: {\n            [EventType.Blur]: StateType.Blurred\n          }\n        },\n        [StateType.Blurred]: {\n          on: {\n            [EventType.Focus]: StateType.Focused\n          }\n        }\n      }\n    }\n  }\n};\n\nconst isChangeEvent = <T>(event: Event<T>): event is ChangeEvent<T> =>\n  event.type === EventType.Change;\n\n/**\n *\n * @param param0\n */\nexport const createMachine = <T>({\n  isValid = () => true,\n  withConfig\n}: {\n  isValid?: (value?: T) => boolean;\n  withConfig?: (\n    config: MachineConfig<Context<T>, StateSchema<T>, Event<T>>\n  ) => MachineConfig<Context<T>, StateSchema<T>, Event<T>>;\n} = {}) => {\n  const machineConfiguration = withConfig\n    ? withConfig(configuration)\n    : configuration;\n\n  return createXStateMachine<Context<T>, Event<T>, TypeState<T>>(\n    machineConfiguration,\n    {\n      actions: {\n        assignValue: assign<Context<T>, Event<T>>({\n          value: (ctx, e) => (isChangeEvent(e) ? e.value : ctx.value)\n        })\n      },\n      guards: {\n        isHuman: (_, e) => (isChangeEvent(e) ? !e.isRobot : false),\n        isValid: (ctx: Context<T>, e: Event<T>) => isValid(isChangeEvent(e) ? e.value : ctx.value),\n        isNotValid: (ctx: Context<T>, e: Event<T>) =>\n          !isValid(isChangeEvent(e) ? e.value : ctx.value)\n      }\n    }\n  );\n};\n\nexport const reset = (): ResetEvent => ({ type: EventType.Reset });\nexport const focus = (): FocusEvent => ({ type: EventType.Focus });\nexport const blur = (): BlurEvent => ({ type: EventType.Blur });\nexport const change = <T>(value: T, isRobot = false): ChangeEvent<T> => ({\n  type: EventType.Change,\n  value,\n  isRobot\n});\n","/**\n * @packageDocumentation\n * @module xstate\n */\n\n import { useEffect } from \"react\";\nimport { Interpreter, StateSchema, EventObject, Typestate } from \"xstate\";\n\n/**\n * ```hs\n * useServiceLogger :: Interpreter ctx schema event typeState ->  string -> void\n * ```\n * \n * React hook for logging interpreted state machines.\n * \n * @typeparam TContext The state machine's context state type\n * @typeparam TStateSchema Schema type, defaults to `any`\n * @typeparam TEvent The types of events that the machine dispatches, defaults to `any`\n * @typeparam TTypeState The typed contextual state of a machine, defaults to `any`\n * @param service The interpreted state machine's service\n * @param name A name used to label the logged group.\n */\nexport const useServiceLogger = <\n  TContext,\n  TStateSchema extends StateSchema = any,\n  TEvent extends EventObject = EventObject,\n  TTypestate extends Typestate<TContext> = any\n>(\n  service: Interpreter<TContext, TStateSchema, TEvent, TTypestate>,\n  name?: string\n) =>\n  useEffect(() => {\n    let i = 0;\n\n    const subscription = service.subscribe(nextState => {\n      if (name) {\n        console.groupCollapsed(`${name} (${++i})`);\n      }\n\n      console.log(JSON.stringify(nextState.value, null, 2))\n      console.log(JSON.stringify(nextState.context, null, 2))\n      console.log(nextState);\n\n      if (name) {\n        console.groupEnd();\n      }\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n  }, [service, name]);\n\n  export default useServiceLogger","/**\n * @packageDocumentation\n * @module xstate\n * @preferred\n * \n * Functions and utilities that compliment the XState library\n */\n\nimport { DoneInvokeEvent, ErrorPlatformEvent } from \"xstate\";\n\nexport { default as withContext } from \"./withContext\";\n\nexport { default as useServiceLogger } from \"./useServiceLogger\";\n\n/**\n * Asserts that an event is of type [[DoneInvokeEvent]].\n * \n * @typeparam TData The type of the DoneInvokeEvent's `.data` payload.\n * @typeparam TEvent The set of event types given event can be of\n * @param event The event object that is sent by or to the state machine.\n */\nexport const isDoneInvokeEvent = <TData, TEvent extends { type: string }>(\n  event: TEvent | DoneInvokeEvent<TData>\n): event is DoneInvokeEvent<TData> => /^done.invoke/.test(event.type);\n\n/**\n * Asserts that an event is of type [[ErrorPlatformEvent]]\n * \n * @typeparam TEvent The set of event types given event can be of\n * @param event The event object that is sent by or to the state machine.\n */\nexport const isErrorPlatformEvent = <TEvent extends { type: string }>(\n  event: TEvent | ErrorPlatformEvent\n): event is ErrorPlatformEvent => /^error.platform/.test(event.type);\n","/**\n * @packageDocumentation\n * @module streams/reset\n */\nimport { Subject } from 'rxjs'\n\n/**\n * Statefull stream that serves as a ping/pong stream. The \"state\" or messages\n * sent to or subscribed to are ignored. This stream is used by state machines\n * to reset themselves (e.g. cancel a form submission) or other state streams\n * to go back to their intial state (e.g. form text input controls).\n * \n */\nexport const reset$ = new Subject<any>()\n\n/**\n * Dispatches a ping event to the [[reset$]] stream.\n */\nexport const reset = () => reset$.next()","/**\n * @packageDocumentation\n * @module streams/authentication\n */\n\nimport { BehaviorSubject, combineLatest } from \"rxjs\";\nimport * as O from \"fp-ts/lib/Option\";\nimport * as E from \"fp-ts/lib/Either\";\nimport { Failure } from \"../apis/q\";\nimport { User } from \"../models/users\";\nimport { map, filter } from \"rxjs/operators\";\nimport { dot, forward, trim, negate, isNotNull } from \"../utils\";\nimport { flow, constant } from \"fp-ts/lib/function\";\nimport { reset$ } from \"./reset\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { identity } from \"io-ts\";\n// Types\nexport interface AnonymousUser {\n  username: string;\n  password: string;\n}\n\nexport type LoginOutcome = E.Either<Failure, User>;\n\nexport type LoginOperation = O.Option<LoginOutcome>;\n\nexport type Value<T> = { value: T; robot: boolean };\n\nexport const dotValue = dot(\"value\");\n\nexport const isRobot = dot(\"robot\");\n\nexport const isHuman = negate(isRobot);\n\n// Streams\nexport const loginOperation$ = new BehaviorSubject<LoginOperation>(O.none);\n\nexport const isAuthenticated$ = loginOperation$.pipe(\n  map(maybeResponse =>\n    pipe(\n      maybeResponse,\n      O.map(response => pipe(response, E.fold(constant(false), constant(true)))),\n      O.fold(constant(false), constant(true))\n    )\n  ),\n  filter(isNotNull)\n);\n\nexport const username$ = new BehaviorSubject<Value<string>>({\n  value: \"\",\n  robot: true\n});\n\nexport const password$ = new BehaviorSubject<Value<string>>({\n  value: \"\",\n  robot: true\n});\n\nexport const usernameValue$ = username$.pipe(map(dotValue));\nexport const passwordValue$ = password$.pipe(map(dotValue));\nexport const anonymousUser$ = combineLatest(\n  usernameValue$,\n  passwordValue$\n).pipe(map(([username, password]): AnonymousUser => ({ username, password })));\n\n// Getters\nexport const getLoginOperation = loginOperation$.getValue.bind(loginOperation$);\nexport const getUsername = flow(username$.getValue.bind(username$), dotValue);\nexport const getPassword = flow(password$.getValue.bind(password$), dotValue);\nexport const getAnonymousUser = (): AnonymousUser => ({\n  username: getUsername(),\n  password: getPassword()\n});\n\n// Setters\nexport const setLoginOperation = forward(\n  loginOperation$.next.bind(loginOperation$)\n);\n\nexport const resetLoginOperation = setLoginOperation.bind(null, O.none);\n\nexport const makeValue = (robot: boolean) => <T>(value: T) => ({\n  value,\n  robot\n});\nexport const makeHumanValue = makeValue(false);\nexport const makeRobotoValue = makeValue(true);\nexport const setUsername = flow(\n  trim,\n  makeHumanValue,\n  forward(username$.next.bind(username$)),\n  dotValue\n);\nexport const setPassword = flow(\n  trim,\n  makeHumanValue,\n  forward(password$.next.bind(password$)),\n  dotValue\n);\n\nexport const resetUsername = flow(\n  trim,\n  makeRobotoValue,\n  forward(username$.next.bind(username$)),\n  dotValue\n).bind(null, \"\");\n\nexport const resetPassword = flow(\n  trim,\n  makeRobotoValue,\n  forward(password$.next.bind(password$)),\n  dotValue\n).bind(null, \"\");\n\nexport const resetAnonymousUser = flow(resetUsername, resetPassword);\n\nexport const user$ = loginOperation$.pipe(\n  map(maybeResponse =>\n    pipe(\n      maybeResponse,\n      O.map(response => pipe(response, E.fold(constant(null), identity))),\n      O.fold(constant(null), identity)\n    )\n  ),\n  filter(isNotNull)\n);\n\n// This is bad. An effect hidden in the code\n// TODO Move to the root of the app\nreset$.subscribe(flow(resetAnonymousUser, resetLoginOperation));\n","import { createMachine as createXStateMachine, MachineConfig } from \"xstate\";\n\nimport { StateType, EventType, Event } from \"./types\";\n\n/**\n * Raw configuration for input control state machines\n */\nexport const configuration = {\n  id: 'operator',\n  initial: StateType.InProgress,\n  on: {\n    [EventType.Reset]: {\n      target: StateType.InProgress\n    }\n  },\n  states: {\n    [StateType.InProgress]: {\n      initial: StateType.InValid,\n      states: {\n        [StateType.Valid]: {\n          on: {\n            [EventType.InValid]: StateType.InValid,\n            [EventType.Submit]: {\n              target: `#operator.${StateType.Submitting}`\n            }\n          }\n        },\n        [StateType.InValid]: {\n          on: {\n            [EventType.Valid]: StateType.Valid\n          }\n        }\n      }\n    },\n    [StateType.Submitting]: {\n      invoke: {\n        id: \"submitOperation\",\n        src: \"submitOperation\",\n        onDone: StateType.Done,\n        onError: StateType.Done\n      }\n    },\n    [StateType.Done]: {}\n  }\n};\n\nconst isEvent = <E extends Event<any, any>[\"type\"]>(eventType: E) => <L, R>(\n  event: Event<L, R>\n): event is Extract<Event<L, R>, { type: E }> => event.type === eventType;\n\nexport const isSubmitEvent = isEvent(EventType.Submit);\n\nexport const services = {\n  submitOperation: (_: any, evt: Event<any, any>) =>\n    isSubmitEvent(evt)\n      ? evt.promiser()\n      : Promise.reject(\"submitService invoked by non-submit event!\")\n};\n\nexport const createMachine = <L, R>(\n  withConfig?: (c: typeof configuration) => MachineConfig<any, any, Event<L, R>>\n) =>\n  createXStateMachine<any, Event<L, R>>(\n    withConfig ? withConfig(configuration) : configuration,\n    {\n      services: services as any\n    }\n  );\n","import * as React from \"react\";\n\nimport { TextField } from \"@rmwc/textfield\";\nimport { PropsOf } from \"../../types\";\n\nexport * from \"@rmwc/textfield\";\n\nexport type PropsInput = PropsOf<typeof TextField> & {\n  takeFocus?: any;\n  onEnter?: () => void;\n  invalid?: boolean;\n};\n\nexport const Input = (props: PropsInput) => {\n  const inputRef = React.useRef<null | HTMLInputElement>(null)\n \n  // Hooks\n  React.useLayoutEffect(() => {\n    if (props.takeFocus) {\n      setTimeout(\n        () => inputRef.current?.focus(),\n        100\n      );\n    }\n  }, [props.takeFocus]);\n\n  const onKeyPress = React.useMemo(\n    () => (evt: React.KeyboardEvent<HTMLInputElement>) => {\n      if (evt.which === 13 && props.onEnter) {\n        props.onEnter();\n      } else if (props.onKeyPress) {\n        props.onKeyPress(evt);\n      }\n    },\n    [props.onEnter, props.onKeyPress]\n  );\n\n  // pROPS\n  const {\n    takeFocus,\n    onEnter,\n    ...textFieldProps\n  } = props;\n\n  // const status = dataStatus ? dataStatus : invalid ? \"error\" : undefined;\n\n  return (\n    <TextField\n      {...textFieldProps}\n      inputRef={inputRef}\n      onKeyPress={onKeyPress}\n    />\n  );\n};\n\nexport default Input;\n","// Libs\nimport * as React from \"react\";\n\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { map, mapTo, tap } from \"rxjs/operators\";\nimport { useObservableState } from \"observable-hooks\";\n\nimport { assign, spawn } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\n\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport * as R from \"fp-ts/lib/Reader\";\nimport * as O from \"fp-ts/lib/Option\";\nimport * as S from \"fp-ts/lib/Semigroup\";\nimport { constant, identity, flow } from \"fp-ts/lib/function\";\n\n// Modules\nimport createMachine, {\n  State,\n  change,\n  reset,\n  focus,\n  blur,\n  MachineConfig\n} from \"../machines/input-control\";\n\n// Utils\nimport { getEventCurrentTargetValue } from \"../utils/getters\";\nimport { returnLast, forward } from \"../utils/functions\";\nimport { isTruthy } from \"../utils/assert\";\nimport { voidFn } from \"../utils/functions\";\nimport { InputEvent, PropsOf } from \"../types\";\nimport { useServiceLogger } from \"../xstate\";\nimport { useSubject } from \"../hooks\";\nimport { Value, dotValue, isRobot } from \"../streams/authentication\";\nimport { Input, PropsInput } from \"./input-controls/Input\";\nimport { trim, pick } from \"../utils\";\n\n// Streams\nimport { reset$ } from \"../streams/reset\";\nimport { makeHumanValue } from \"../streams/authentication\";\n\nconst inputEventIdentity = (event: InputEvent) => event;\n\nconst getEventValue = R.map<InputEvent, string>(getEventCurrentTargetValue);\n\nexport interface RenderProps {\n  value: string;\n  invalid: boolean;\n  focused: boolean;\n  onChange: R.Reader<React.FormEvent<HTMLInputElement>, string>;\n  onFocus: () => void;\n  onBlur: () => void;\n}\n\nexport interface InputProviderArgs {\n  name: string;\n  isValid?: (value?: string) => boolean;\n  withConfig?: (config: MachineConfig<string>) => MachineConfig<string>;\n  value$: Observable<Value<string>>;\n  update: (next: string) => void;\n}\n\nexport const inputProvider = ({\n  name,\n  isValid = constant(true),\n  withConfig,\n  value$,\n  update\n}: InputProviderArgs) => {\n  const defaultWithConfig = (\n    config: MachineConfig<string>\n  ): MachineConfig<string> => {\n    const entry = config.entry\n      ? Array.isArray(config.entry)\n        ? config.entry\n        : [config.entry]\n      : [];\n\n    return {\n      ...config,\n      context: {\n        ...config.context,\n        // @ts-ignore\n        reset$Ref: null,\n        // @ts-ignore\n        change$Ref: null\n      },\n      entry: [\n        ...entry,\n        assign<any, any>({\n          reset$Ref: () => spawn(reset$.pipe(mapTo(reset()))),\n          change$Ref: () =>\n            spawn(\n              value$.pipe(\n                tap(value => {\n                  // debugger;\n                }),\n                map(value => change(dotValue(value), isRobot(value)))\n              )\n            )\n        })\n      ]\n    };\n  };\n\n  const machine = createMachine<string>({\n    isValid,\n    withConfig: flow(defaultWithConfig, withConfig || identity)\n  });\n\n  const streamUsername = R.chain<InputEvent, string, string>(\n    flow(returnLast(update, identity), constant)\n  );\n\n  const state$ = new BehaviorSubject<O.Option<State<string>>>(O.none);\n\n  const stateIsValid = (state: State<string>) =>\n    state.matches(\"valid.valid\" as any);\n  const mapStateIsValid = O.map(stateIsValid);\n\n  // @ts-ignore\n  const isValid$ = state$.pipe(\n    map(maybeState =>\n      pipe(maybeState, mapStateIsValid, O.fold(constant(false), identity))\n    )\n  );\n\n  const Input: React.FC<{\n    children: (renderProps: RenderProps) => JSX.Element;\n  }> = props => {\n    const [state, send, service] = useMachine(machine);\n\n    if (process.env.NODE_ENV === \"development\") {\n      useServiceLogger(service, `input(${name})`); // eslint-disable-line react-hooks/rules-of-hooks\n    }\n\n    useSubject(state$, state);\n    const username = useObservableState(value$.pipe(map(dotValue)), \"\");\n\n    const onChange = pipe(inputEventIdentity, getEventValue, streamUsername);\n    const onFocus = flow(focus, send, voidFn);\n    const onBlur = flow(blur, send, voidFn);\n\n    return props.children({\n      value: username,\n      invalid:\n        state.matches(\"touched.touched\") && state.matches(\"valid.invalid\"),\n      focused: state.matches(\"focused.focused\"),\n      onChange,\n      onFocus,\n      onBlur\n    });\n  };\n\n  Object.defineProperty(Input, \"displayName\", {\n    value: `${name}(InputProvider)`\n  });\n\n  return [Input, isValid$, state$] as const;\n};\n\nexport default inputProvider;\n\nexport const stringInputProvider = (\n  name: string,\n  options: {\n    required?: boolean;\n    isValid?: (value?: string) => boolean;\n  } = {}\n) => {\n  const semigroupPredicate = S.getFunctionSemigroup(S.semigroupAll)<\n    string | undefined\n  >();\n\n  const isValidFn = semigroupPredicate.concat(\n    options.required ? isTruthy : constant(true),\n    options.isValid || constant(true)\n  );\n\n  const value$ = new BehaviorSubject<Value<string>>({\n    value: \"\",\n    robot: true\n  });\n\n  const update = flow(\n    trim,\n    makeHumanValue,\n    forward(value$.next.bind(value$)),\n    dotValue\n  );\n\n  const [Provider, isValid$, state$] = inputProvider({\n    name,\n    isValid: isValidFn,\n    value$,\n    update\n  });\n\n  const picker = pick(\"invalid\", \"focused\", \"value\");\n\n  const InputComponent = (\n    props: Omit<PropsInput, keyof RenderProps | \"children\"> & {\n      children?: (\n        childProps: Pick<RenderProps, \"value\" | \"focused\" | \"invalid\">\n      ) => JSX.Element;\n    }\n  ) => (\n    <Provider>\n      {providedProps => (\n        <>\n          <Input {...props} {...providedProps} />\n          {props.children\n            ? props.children(picker(providedProps))\n            : null}\n        </>\n      )}\n    </Provider>\n  );\n\n  Object.defineProperty(InputComponent, \"displayName\", {\n    value: `${name}(StringInputProvider)`\n  });\n\n  return [InputComponent, value$, isValid$, update, state$] as const;\n};\n","import * as React from 'react'\nimport { Subject } from 'rxjs'\nimport * as O from 'fp-ts/lib/Option'\n\nexport const useSubject = <T, S extends Subject<O.Option<T>>>(subject$: S, next: T) => {\n  subject$.next(O.some(next));\n  \n  React.useEffect(() => () => subject$.next(O.none), [subject$]);\n}","import * as React from 'react'\nimport text from './text.json'\nimport { Typography } from '../../Typography'\n\nexport default <Typography use={'subtitle2'}>{text.usernameLabel}</Typography>","import * as React from \"react\";\n\nimport { Icon } from \"@rmwc/icon\";\n\nimport Input from \"../Input\";\nimport usernameLabel from \"../../labels/usernameLabel\";\n\nimport { PropsOf } from \"../../../types\";\n\ntype InputProps = PropsOf<typeof Input>;\n\nexport interface PropsUsername {\n  value: string;\n  onEnter: InputProps[\"onEnter\"];\n  onChange: InputProps[\"onChange\"];\n  onFocus: InputProps[\"onFocus\"];\n  onBlur: InputProps[\"onBlur\"];\n  style?: React.CSSProperties;\n  disabled: boolean;\n  invalid: boolean;\n  focused: boolean;\n  takeFocus?: any;\n}\n\nconst styles = {\n  block: { display: \"block\" }\n};\n\nexport const UsernameInput = (props: PropsUsername) => {\n  return (\n    <>\n      {usernameLabel}\n      <div>\n        <Input\n          data-test=\"input-username\"\n          value={props.value}\n          placeholder=\"Username\"\n          required\n          disabled={props.disabled}\n          onEnter={props.onEnter}\n          onChange={props.onChange}\n          onFocus={props.onFocus}\n          onBlur={props.onBlur}\n          style={styles.block}\n          takeFocus={props.takeFocus}\n          icon={<Icon icon={'person'} theme={props.focused ? 'primary' : undefined} />}\n          helpText={{\n            children: props.invalid ? <span>{\"A username is required!\"}</span> : <br />,\n            validationMsg: true,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default UsernameInput;\n","// Libs\nimport * as React from \"react\";\nimport { mapTo, scan } from \"rxjs/operators\";\nimport { useObservableState } from \"observable-hooks\";\n\n// Boilerplate\nimport makeInput, { RenderProps } from \"../../../modules/components/inputProvider\";\n\n// Components\nimport UsernameInput, {\n  PropsUsername\n} from \"../../../modules/components/input-controls/Username\";\n\n// Utils\nimport { isTruthy } from \"../../../modules/utils/assert\";\n\n// Streams\nimport {\n  username$,\n  setUsername,\n} from \"../../../modules/streams/authentication\";\n\n\nimport { reset$ } from \"../../../modules/streams/reset\";\n\nconst takeFocus$ = reset$.pipe(\n  mapTo(2),\n  scan((acc, next) => acc + next)\n);\n\nexport const [InputProvider, isValid$, state$] = makeInput({\n  name: \"username\",\n  isValid: isTruthy,\n  update: setUsername,\n  value$: username$,\n});\n\nconst Username = (props: Omit<PropsUsername, keyof RenderProps | 'takeFocus'>) => {\n  const takeFocus = useObservableState(takeFocus$, 1);\n\n  return (\n    <InputProvider>\n      {providedProps => (\n        <UsernameInput {...providedProps} {...props} takeFocus={takeFocus} />\n      )}\n    </InputProvider>\n  );\n};\n\nexport default Username;\n","import * as React from 'react'\nimport text from './text.json'\nimport { Typography } from '@rmwc/typography'\n\nexport default <Typography use={'subtitle2'}>{text.passwordLabel}</Typography>","import * as React from \"react\";\n\nimport { Icon } from \"@rmwc/icon\";\n\nimport Input from \"../Input\";\nimport passwordLabel from \"../../labels/passwordLabel\";\nimport { PropsOf } from \"../../../types\";\n\ntype InputProps = PropsOf<typeof Input>;\n\nexport interface PropsPassword {\n  value: string;\n  onEnter: InputProps[\"onEnter\"];\n  onChange: InputProps[\"onChange\"];\n  onFocus: InputProps[\"onFocus\"];\n  onBlur: InputProps[\"onBlur\"];\n  style?: React.CSSProperties;\n  disabled: boolean;\n  invalid: boolean;\n  focused: boolean;\n}\n\nconst styles = {\n  block: { display: \"block\" }\n};\n\nexport const PasswordInput = (props: PropsPassword) => (\n  <>\n    <div>{passwordLabel}</div>\n    <div>\n      <Input\n        data-test=\"input-password\"\n        value={props.value}\n        placeholder=\"Password\"\n        type=\"password\"\n        required\n        data-status={props.invalid ? \"error\" : undefined}\n        disabled={props.disabled}\n        onEnter={props.onEnter}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        onBlur={props.onBlur}\n        style={Object.assign({}, props.style, styles.block)}\n        icon={<Icon icon={props.focused ? 'lock_open' : 'lock'} theme={props.focused  ? 'primary' : undefined} />}\n        helpText={{\n          children: props.invalid ? <span>{\"A password is required!\"}</span> : <br />,\n          validationMsg: true,        \n        }}\n      />\n    </div>\n  </>\n);\n\nexport default PasswordInput;\n","// Libs\nimport * as React from \"react\";\n\n// Boilerplate\nimport makeInput, { RenderProps } from \"../../../modules/components/inputProvider\";\n\n// Components\nimport PasswordInput, {\n  PropsPassword\n} from \"../../../modules/components/input-controls/Password\";\n\n// Utils\nimport { isTruthy } from \"../../../modules/utils/assert\";\n\n// Streams\nimport {\n  password$,\n  setPassword,\n} from \"../../../modules/streams/authentication\";\n\n\nexport const [InputProvider, isValid$, state$] = makeInput({\n  name: \"password\",\n  isValid: isTruthy,\n  update: setPassword,\n  value$: password$,\n});\n\nconst Password = (props: Omit<PropsPassword, keyof RenderProps>) => {\n  return (\n    <InputProvider>\n      {providedProps => (\n        <PasswordInput {...providedProps} {...props} />\n      )}\n    </InputProvider>\n  );\n};\n\nexport default Password;\n\n","import React from \"react\";\n\nimport CLoginForm from \"../../../modules/components/LoginForm\";\n\nimport LoginButton from \"./LoginButton\";\nimport UsernameInput from \"./UsernameInput\";\nimport PasswordInput from \"./PasswordInput\";\n\nexport interface PropsLoginForm {\n  isSubmitting: boolean;\n  canNotSubmit: boolean;\n  onLogin: () => void;\n  resetButton: React.ReactNode;\n}\n\nconst LoginForm = (props: PropsLoginForm) => {\n  return (\n    <CLoginForm\n      usernameInput={<UsernameInput disabled={props.isSubmitting} onEnter={props.onLogin} />}\n      passwordInput={<PasswordInput disabled={props.isSubmitting} onEnter={props.onLogin} />}\n      loginButton={\n        <LoginButton disabled={props.canNotSubmit} onClick={props.onLogin} />\n      }\n      resetButton={props.resetButton}\n    />\n  );\n};\n\nexport default LoginForm;\n","import { User } from \"../../models/users/types\";\n\nimport q from '../q'\n\n/**\n * \n */\nexport const URL = \"https://jsonplaceholder.typicode.com/users/1\";\n\n/**\n * \n */\nexport type Params = { username: string; password: string };\n\n/**\n * \n */\nexport const fetchLogin = (_params: Params) =>\n  fetch(\"https://jsonplaceholder.typicode.com/users/1\");\n\n/**\n * \n */\n  export const fetchUser = async (params: Params) =>  q(User)(() => fetchLogin(params))","import { Either } from \"fp-ts/lib/Either\";\n\nimport {\n  MachineOptions as XStateMachineOptions,\n  MachineConfig as XStateMachineConfig,\n  StateSchema as XStateStateSchema,\n  State as XState,\n  DoneInvokeEvent,\n  ErrorPlatformEvent\n} from \"xstate\";\n\nexport const StateTypeInProgress = \"inProgress\" as const;\nexport const StateTypeValid = \"Valid\" as const;\nexport const StateTypeInValid = \"InValid\" as const;\nexport const StateTypeSubmitting = \"submitting\" as const;\nexport const StateTypeDone = \"done\" as const;\n\nexport const StateType = {\n  InProgress: StateTypeInProgress,\n  Submitting: StateTypeSubmitting,\n  Done: StateTypeDone,\n  Valid: StateTypeValid,\n  InValid: StateTypeInValid\n};\n\nexport const EventTypeSubmit: \"SUBMIT\" = \"SUBMIT\";\nexport const EventTypeReset: \"RESET\" = \"RESET\";\nexport const EventTypeValid: \"VALID\" = \"VALID\";\nexport const EventTypeInValid: \"INVALID\" = \"INVALID\";\n\n/**\n * Dictionary of input control state event types.\n */\nexport const EventType = {\n  Submit: EventTypeSubmit,\n  Reset: EventTypeReset,\n  Valid: EventTypeValid,\n  InValid: EventTypeInValid\n};\n\n/**\n * Events dispatched for the input control state machine.\n */\nexport type Event<L, R> =\n  | { type: typeof EventType.Submit; promiser: () => Promise<Either<L, R>> }\n  | { type: typeof EventType.Reset }\n  | { type: typeof EventType.Valid, }\n  | { type: typeof EventType.InValid, }\n  | DoneInvokeEvent<Either<L, R>>\n  | ErrorPlatformEvent;\n\n/**\n * Possible states for the input control machine.\n *\n * @typeparam T See [[Context.value]]\n */\nexport type TypeState =\n  | { context: any, value: { [StateType.Valid]: {}; [StateType.InValid]: {} } }\n  | { context: any, value: typeof StateType.Submitting }\n  | { context: any, value: typeof StateType.Done };\n\nexport interface StateSchema extends XStateStateSchema {\n  context: {};\n  states: {\n    [StateType.InProgress]: {\n      states: {\n        [StateType.Valid]: {},\n        [StateType.InValid]: {}\n      }\n    };\n    [StateType.Submitting]: {};\n    [StateType.Done]: {};\n  };\n}\n\nexport type MachineOptions<L, R> = Partial<\n  XStateMachineOptions<any, Event<L, R>>\n>;\n\nexport type MachineConfig<L, R> = XStateMachineConfig<\n  any,\n  StateSchema,\n  Event<L, R>\n>;\n\nexport type State<L, R> = XState<any, Event<L, R>, StateSchema, TypeState>\n","// Libs\nimport React from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport * as O from \"fp-ts/lib/Option\";\nimport * as E from \"fp-ts/lib/Either\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { constant } from \"fp-ts/lib/function\";\n\n// Components\nimport Content from \"../../../modules/components/Content/Content\";\nimport WelcomeMessage from \"../../../modules/components/WelcomeMessage\";\nimport ResetButton from \"./ResetButton\";\nimport FailureMessage from \"./FailureMessage\";\nimport LoginForm from \"./LoginForm\";\n\n// Modules\nimport { fetchUser } from \"../../../modules/apis/login-api\";\nimport { useServiceLogger, isDoneInvokeEvent } from \"../../../modules/xstate\";\n// import { machine as loginMachine, api } from \"../../../modules/machines/login\";\n\nimport configuration, {\n  createMachine, EventType, StateType\n} from \"../../../modules/machines/operator\";\n\n// Text\nimport text from \"./text.json\";\nimport { User } from \"../../../modules/models/users\";\nimport { Failure } from \"../../../modules/apis/q\";\n\n// Streams\nimport { reset, reset$ } from '../../../modules/streams/reset'\nimport { isValid$ as usernameIsValid$ } from \"./UsernameInput\";\nimport { isValid$ as passwordIsValid$ } from \"./PasswordInput\";\nimport { map, mapTo, tap } from \"rxjs/operators\";\nimport { combineLatest } from \"rxjs\";\nimport { useObservableState } from \"observable-hooks\";\n\nimport { loginOperation$, getAnonymousUser } from '../../../modules/streams/authentication'\nimport { assign, spawn, State } from \"xstate\";\n\nconst isValid$ = combineLatest(usernameIsValid$, passwordIsValid$).pipe(\n  map(([a, b]) => a && b),\n);\n\nconst canReset$ = combineLatest(usernameIsValid$, passwordIsValid$).pipe(\n  map(([a, b]) => a || b),\n);\n\nlet i = 0;\n\nconst machine = createMachine<Failure, User>(config => {\n  return {\n    ...config,\n    states: {\n      ...config.states,\n      [StateType.Done]: {\n        entry:  'assignDone'\n      }\n    },\n    context: {\n      reset$Ref: null\n    },\n    entry: assign({\n      reset$Ref: () => spawn(reset$.pipe(mapTo({ type: EventType.Reset}))),\n      isValid$Ref: () => spawn(isValid$.pipe(map(isValid => ({ type: isValid ? EventType.Valid : EventType.InValid}))))\n    })\n  }\n}).withConfig({\n  actions: {\n    assignDone: (_, evt) => isDoneInvokeEvent(evt) && loginOperation$.next(O.some(evt.data))\n  }\n});\n\nlet p: any = null\n\n// Exports\nconst LoginApp = () => {\n  // Hooks\n  const [operatorState, send, service] = useMachine(machine);\n\n  const isValid = useObservableState(isValid$, false)\n  const canReset = useObservableState(canReset$, false)\n  const loginOperation = useObservableState(loginOperation$, O.none)\n \n  useServiceLogger(service, \"login\");\n\n  // Derived information\n  const isInProgress = operatorState.matches(StateType.InProgress);\n  const isNotInProgress = !isInProgress;\n  const isSubmitting = operatorState.matches(StateType.Submitting);\n\n  const canNotSubmit =\n    isNotInProgress || !isValid\n\n  const loggedIn = pipe(\n    loginOperation,\n    O.fold(constant(false), either =>\n      pipe(either, E.fold(constant(false), constant(true)))\n    )\n  );\n\n  const resetText = isInProgress\n    ? text[\"Reset\"]\n    : isSubmitting\n    ? text[\"Cancel\"]\n    : loggedIn\n    ? text[\"Logout\"]\n    : text[\"Try again\"];\n\n  const resetButton = <ResetButton disabled={!canReset} onClick={reset} takeFocus={operatorState.matches(StateType.Done)}>{resetText}</ResetButton>;\n\n  const form = (\n    <LoginForm\n      isSubmitting={isSubmitting}\n      canNotSubmit={canNotSubmit}\n      onLogin={() => {\n        send({\n          type: EventType.Submit,\n          promiser: async () => {\n            const response = await fetchUser(getAnonymousUser())\n\n            // loginOperation$.next(O.some(response))\n\n\n            return response\n          }\n        });\n      }}\n      resetButton={resetButton}\n    />\n  );\n\n  const content = pipe(\n    loginOperation,\n    O.fold(constant(form), either =>\n      pipe(\n        either,\n        E.fold(\n          failure => (\n            <>\n              <FailureMessage failure={failure} />\n              {resetButton}\n            </>\n          ),\n\n          user => {\n            return (\n              <div>\n                <WelcomeMessage user={user} />\n                <br />\n                {resetButton}\n              </div>\n            );\n          }\n        )\n      )\n    )\n  );\n\n  return <Content loading={isSubmitting}>{content}</Content>;\n};\n\nexport default LoginApp;\n","import * as React from \"react\";\nimport { TextFieldHelperText } from \"@rmwc/textfield\";\n\nexport interface PropsValidationHelperText {\n  invalid?: boolean;\n  children?: React.ReactNode;\n  defaultText?: React.ReactNode;\n}\n\nconst ValidationHelperText = (props: PropsValidationHelperText) => {\n  return (\n    <TextFieldHelperText validationMsg persistent>\n      {props.invalid ? props.children :  props.defaultText || <br />}\n    </TextFieldHelperText>\n  );\n};\n\nexport default ValidationHelperText","// Boilerplate\nimport { stringInputProvider } from \"../../../modules/components/inputProvider\";\n\n\nexport const [Name, name$, isValid$, update] = stringInputProvider('name', { required: true })\n\n","// Boilerplate\nimport { stringInputProvider } from \"../../../modules/components/inputProvider\";\nimport { isEmail } from \"../../../modules/utils\";\n\nexport const [Email, email$, isValid$, update] = stringInputProvider(\"email\", {\n  required: true,\n  isValid: isEmail\n});\n","// Boilerplate\nimport { stringInputProvider } from \"../../../modules/components/inputProvider\";\n\n\nexport const [Message, message$, isValid$, update] = stringInputProvider('message')\n\n","import { BehaviorSubject, combineLatest } from \"rxjs\";\nimport * as O from \"fp-ts/lib/Option\";\nimport * as E from \"fp-ts/lib/Either\";\n\nimport { reset as pingReset  } from '../../modules/streams/reset'\n\nimport { update as updateName, isValid$ as nameIsValid$ } from './components/Name'\nimport { update as updateEmail, isValid$ as emailIsValid$ } from './components/Email'\nimport { update as updateMessage } from './components/Message'\nimport { map } from \"rxjs/operators\";\n\nexport const contactUsResponse$ = new BehaviorSubject<\n  O.Option<E.Either<false, true>>\n>(O.none);\n\nexport const isValid$ = combineLatest(nameIsValid$, emailIsValid$).pipe(\n  map(([a, b]) => a && b),\n);\n\nexport const reset = () => {\n  updateName(\"\")\n  updateEmail(\"\")\n  updateMessage(\"\")\n  pingReset()\n}\n","import { assign, spawn } from \"xstate\";\nimport { mapTo, map } from \"rxjs/operators\";\nimport * as O from \"fp-ts/lib/Option\";\n\nimport {\n  createMachine,\n  EventType,\n  StateType\n} from \"../../modules/machines/operator\";\nimport { reset$ } from \"../../modules/streams/reset\";\nimport { isDoneInvokeEvent } from \"../../modules/xstate\";\n\nimport { contactUsResponse$, isValid$ } from \"./streams\";\n\nexport const machine = createMachine<false, true>(config => {\n  return {\n    ...config,\n    states: {\n      ...config.states,\n      [StateType.Done]: {\n        entry: \"assignDone\"\n      }\n    },\n    entry: assign({\n      reset$Ref: () => spawn(reset$.pipe(mapTo({ type: EventType.Reset }))),\n      isValid$Ref: () =>\n        spawn(\n          isValid$.pipe(\n            map(isValid => ({\n              type: isValid ? EventType.Valid : EventType.InValid\n            }))\n          )\n        )\n    })\n  };\n}).withConfig({\n  actions: {\n    assignDone: (_, evt) =>\n      isDoneInvokeEvent(evt) && contactUsResponse$.next(O.some(evt.data))\n  }\n});\n\nexport default machine;\n","// Libs\nimport * as React from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport { useTranslation, UseTranslationResponse } from \"react-i18next\";\nimport { useObservableState } from \"observable-hooks\";\nimport * as E from \"fp-ts/lib/Either\";\nimport * as O from \"fp-ts/lib/Option\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { constant } from \"fp-ts/lib/function\";\nimport { TextFieldHelperText } from '@rmwc/textfield'\n\n// Modules\nimport Redirect from \"../../../modules/router/components/Redirect\";\nimport Button from '../../../modules/components/input-controls/Button'\nimport Typogrpahy from '../../../modules/components/Typography'\nimport Content from \"../../../modules/components/Content\";\nimport { FormField, FormFields } from \"../../../modules/components/FormField\";\nimport ValidationHelperText from \"../../../modules/components/input-controls/ValidationHelperText\";\nimport { EventType } from \"../../../modules/machines/operator\";\nimport { isAuthenticated$ } from \"../../../modules/streams/authentication\";\nimport { isTruthy } from \"../../../modules/utils\";\nimport delay from \"../../../modules/utils/delay\";\nimport { useServiceLogger } from \"../../../modules/xstate\";\n\n// App modules & components\nimport machine from \"../machine\";\nimport { contactUsResponse$, isValid$, reset } from \"../streams\";\nimport { Email } from \"./Email\";\nimport { Name } from \"./Name\";\nimport { Message } from \"./Message\";\nimport copy from \"./text.json\";\n\n// Locals\nconst makeRenderRequiredHelperText = (t: UseTranslationResponse[0]) => (props: {\n  invalid: boolean;\n  value: string;\n}) => (\n  <ValidationHelperText\n    {...props}\n    defaultText={props.value ? `Hi ${props.value}!` : \"\"}\n  >\n    {t(\"This field is required\")}\n  </ValidationHelperText>\n);\n\nconst makeRenderEmailHelperText = (t: UseTranslationResponse[0]) => (props: {\n  value: string;\n  invalid: boolean;\n}) => (\n  <ValidationHelperText {...props}>\n    {isTruthy(props.value)\n      ? \"A valid e-mail address is required.\"\n      : \"This field is required.\"}\n  </ValidationHelperText>\n);\n\n// Exports\nconst ContactUs = () => {\n  const [t] = useTranslation();\n  const [operatorState, send, operatorService] = useMachine(machine);\n  const isAuthenticated = useObservableState(isAuthenticated$, false);\n  const response = useObservableState(contactUsResponse$, O.none);\n  const isValid = useObservableState(isValid$, false);\n\n  useServiceLogger(operatorService, \"contactUs\")\n\n  const renderRequiredHelperText = React.useMemo(\n    () => makeRenderRequiredHelperText(t),\n    [t]\n  );\n\n  const renderEmailHelperText = React.useMemo(\n    () => makeRenderEmailHelperText(t),\n    [t]\n  );\n\n  if (!isAuthenticated) {\n    // return <Redirect to={'home'} />\n  }\n\n  const onSubmit = () => {\n    const submitEvent = {\n      type: EventType.Submit,\n      promiser: async () => {\n        await delay(2000);\n        const response: E.Either<false, true> = E.right(true);\n\n        return response;\n      }\n    };\n\n    send(submitEvent);\n  };\n\n  const isInProgress = operatorState.matches(\"inProgress\");\n\n  const form = (\n    <form style={{ minWidth: \"50vw\" }}>\n      <FormField>\n        <Typogrpahy use={'headline4'}>{t(\"Contact-us\")}</Typogrpahy>\n      </FormField>\n\n      <FormField>\n        <Name label={t(copy[\"Name\"])} takeFocus onEnter={onSubmit} disabled={!isInProgress}>{renderRequiredHelperText}</Name>\n      </FormField>\n\n      <FormField>\n        <Email label={t(copy[\"E-mail\"])} onEnter={onSubmit} disabled={!isInProgress}>{renderEmailHelperText}</Email>\n      </FormField>\n\n      <FormField>\n        <Message label={t(copy[\"Message\"])} onEnter={onSubmit} disabled={!isInProgress} />\n      </FormField>\n\n      <FormFields horizontal centered>\n        <FormField>\n          <Button disabled={!isValid || !isInProgress} raised onClick={onSubmit}>\n            {t(copy[\"Submit\"])}\n          </Button>\n        </FormField>\n\n        <FormField>\n          <Button onClick={reset}>{t(copy[isInProgress ? \"Reset\" : \"Cancel\"])}</Button>\n        </FormField>\n      </FormFields>\n    </form>\n  );\n\n  const content = pipe(\n    // With the optional response\n    response,\n    // Fold it into a:\n    O.fold(\n      // form if there is no response (None)\n      constant(form),\n      // Other wise, if there is a response\n      maybeEither =>\n        pipe(\n          // With it:\n          maybeEither,\n          // Fold it into\n          E.fold(\n            // A sorry message if it's Left (false)\n            constant(\n              <div>\n                {t(\n                  copy[\n                    \"We were unable to process your request. Please contact us at 1.800.267.2001\"\n                  ]\n                )}\n              </div>\n            ),\n            // Or a thank you message if it's Right (true)\n            constant(\n              <div>\n                {t(\n                  copy[\n                    \"Thank you for contacting us. We will be in touch with you as soon as possible.\"\n                  ]\n                )}\n              </div>\n            )\n          )\n        )\n    )\n  );\n\n  return (\n    <Content loading={operatorState.matches(\"submitting\")}>{content}</Content>\n  );\n};\n\nexport default ContactUs;\n","import { createMachine } from \"xstate\";\n\nexport type GOTO = \"GOTO\";\nexport type Context = {} // Partial<{ userId: number | undefined }>\nexport type Event = { type: GOTO, route: string  } & Context\n\nexport const GOTO: GOTO = \"GOTO\"\n\nexport const config = {\n  id: \"routes\",\n  initial: \"home\",\n  context: {},\n  on: {\n    GOTO: [\n      { target: \".home\", cond: \"home\" },\n      { target: \".login\", cond: \"login\" },\n      { target: \".signup\", cond: \"signup\" },\n      { target: \".contactUs\", cond: \"contactUs\" },\n      { target: \".404\" }\n    ]\n  },\n  states: {\n    home: {},\n    signup: {},\n    login: {},\n    contactUs: {},\n    404: {}\n  }\n};\n\nexport const guards = {\n  home: (_: Context, e: Event) => e.route === \"home\",\n  login: (_: Context, e: Event) => e.route === \"login\",\n  signup: (_: Context, e: Event) => e.route === \"signup\",\n  contactUs: (_: Context, e: Event) => e.route === \"contact-us\",\n}\n\n\nexport const actions = {\n}\n\nexport const machine = createMachine(config, { actions, guards })\n","import * as React from \"react\";\n\nimport history from \"history/browser\";\n\nimport { useLocation } from \"../../modules/router/hooks\";\nimport { Event } from \"./machine\";\n\nimport Redirect from \"../../modules/router/components/Redirect\";\n\n// Routed Components\nimport Login from \"../xassy-login\";\nimport ContactUs from \"../xassy-contact-us\";\n\nexport * from \"./machine\";\n\n// Comonents\nconst NotFound = () => {\n  useLocation(\"404\");\n  return <div>404</div>;\n};\n\nconst Location = (props: { path: string; children: React.ReactNode }) => {\n  useLocation(props.path);\n\n  return <>{props.children}</>\n};\n\nconst Route = ({ state }: { state: any }) => {\n  // { state: State<any, any> }) => {\n  if (state.matches(\"home\")) {\n    return <Redirect to={\"login\"} />;\n  } else if (state.matches(\"login\")) {\n    return (\n      <Location path={\"login\"}>\n        <Login />\n      </Location>\n    );\n  } else if (state.matches(\"contactUs\")) {\n    return (\n      <Location path={\"contact-us\"}>\n        <ContactUs />\n      </Location>\n    );\n  } else if (state.matches(\"404\")) {\n    return <NotFound />;\n  }\n\n  return <Redirect to={\"404\"} />;\n};\n\nconst routes = [\n  // /users\\/(?<userId>\\d+)/,\n  /login/,\n  /signup/,\n  /contact-us/\n];\n\nconst makeGotoEventFromUrl = (rawUrl: string): Event => {\n  const url = rawUrl.replace(/^\\/|\\/$/g, \"\");\n\n  const { event } = routes.reduce(\n    (acc, next) => {\n      if (acc.match) {\n        return acc;\n      } else if (next instanceof RegExp) {\n        if (next.test(url)) {\n          const outcome = next.exec(url);\n\n          if (outcome) {\n            const groups = outcome.groups || {};\n\n            const route = Object.keys(groups)\n              .reduce((acc2, key) => {\n                const value = groups[key];\n                return acc2.replace(`/${value}`, \"\");\n              }, outcome.input)\n              .replace(/\\//g, \".\")\n              .replace(/^\\.|\\.$/, \"\");\n\n            return { match: true, event: { type: \"GOTO\", route, ...groups } };\n          }\n        }\n      }\n\n      return acc;\n    },\n    { match: false, event: { type: \"GOTO\", route: \"home\" } }\n  );\n\n  return event as Event;\n};\n\nexport const Router = (props: { send: any; state: any }) => {\n  const [ready, setReady] = React.useState(false);\n\n  React.useEffect(() => {\n    const event = makeGotoEventFromUrl(history.location.pathname);\n    props.send(event);\n    setReady(true);\n  }, [props.send]);\n\n  if (!ready) {\n    return null;\n  }\n\n  return (\n    <>\n      <Route state={props.state} />\n    </>\n  );\n};\n\nexport default Router;\n","/**\n * @packageDocumentation\n * @module router\n */\nimport * as React from \"react\";\nimport { SendContext, StateMachineContext } from \"../../components/SendContext\";\n\n\n/**\n * React props type for the  [[Link]] component.\n */\nexport interface PropsLink {\n  /** Path or url to link to */\n  to: string;\n  /** Object, additional data dispatched with the [[GOTO]] event when the user clicks the link. */\n  params?: any;\n  /** Link text or label */\n  children: (renderProps: { onClick: () => void }) => JSX.Element;\n}\n\n/**\n * React component for rendering links that dispatch routing events\n * to the router's state machine.\n * \n * Example:\n * \n * ```tsx\n * const menu = (\n *  <nav>\n *    <Link disabled>{t('Contact us)}</Link>\n *  </nav>\n * )\n * ```\n * \n * @param props See [[PropsLink]] and any props accepted by the Atomic UI Library's `a-link` web component.\n */\nconst Link = (props: PropsLink) => {\n  const context = React.useContext(SendContext);\n  const onClick = context.send.bind(null, { type: \"GOTO\", route: props.to, ...props.params }, undefined)\n\n  return props.children({onClick})\n\n  // return linkWithSend(props)(context)\n}\n\nexport default Link\n","import * as React from \"react\";\nimport { useMachine } from \"@xstate/react\";\n\n// RMWC\nimport {\n  TopAppBar,\n  TopAppBarRow,\n  TopAppBarSection,\n  TopAppBarTitle,\n  TopAppBarFixedAdjust,\n} from \"@rmwc/top-app-bar\";\n\nimport { SendContext } from \"../../modules/components/SendContext\";\nimport Button from \"../../modules/components/input-controls/Button\";\n\nimport Router, { machine } from \"../xassy-router\";\nimport { useServiceLogger } from \"../../modules/xstate\";\nimport Link from \"../../modules/router/components/Link\";\nimport { useObservableState } from \"observable-hooks\";\nimport { isAuthenticated$ } from \"../../modules/streams/authentication\";\n\nexport default () => {\n  const [state, send, service] = useMachine(machine);\n\n  useServiceLogger(service, \"xassy.router\");\n  const isAuthenticated = useObservableState(isAuthenticated$, false);\n\n  return (\n    <SendContext.Provider value={{ state, send }}>\n      <TopAppBar>\n        <TopAppBarRow>\n          <TopAppBarSection>\n            <TopAppBarTitle>Xassy</TopAppBarTitle>\n          </TopAppBarSection>\n        </TopAppBarRow>\n      </TopAppBar>\n      <TopAppBarFixedAdjust />\n      <nav className=\"dark-bg\">\n        <Link to=\"home\">\n          {({ onClick }) => (\n            <Button\n              icon={'home'}\n              theme={state.matches(\"home\") ? ['secondaryBg'] : []}\n              onClick={onClick}\n              unelevated={state.matches(\"home\")}\n              outlined={!state.matches(\"home\")}\n            >\n              Home\n            </Button>\n          )}\n        </Link>\n        <Link to=\"login\">\n          {({ onClick }) => (\n            <Button\n              theme={state.matches(\"login\") ? ['secondaryBg'] : []}\n              onClick={onClick}\n              unelevated={state.matches(\"login\")}\n              outlined={!state.matches(\"login\")}\n            >\n              Login\n            </Button>\n          )}\n        </Link>\n        <Link to=\"contact-us\">\n          {({ onClick }) => (\n            <Button\n            theme={isAuthenticated && state.matches(\"home\") ? ['secondaryBg'] : []}\n              onClick={onClick}\n              disabled={!isAuthenticated}\n              unelevated={state.matches(\"contactUs\")}\n              outlined={!state.matches(\"contactUs\")}\n            >\n              Contact Us\n            </Button>\n          )}\n        </Link>\n      </nav>\n      <Router send={send} state={state} />\n    </SendContext.Provider>\n  );\n};\n","import \"./App.scss\";\n\nimport React, { Suspense } from \"react\";\n\nimport XASSY from './apps/xassy'\nimport { useTranslation } from \"react-i18next\";\n\nconst NL = () => {\n  const [, i18n] = useTranslation();\n\n  React.useEffect(() => {\n    i18n.changeLanguage(\"nl\");\n    setTimeout(() => {\n      i18n.changeLanguage(\"en\");\n    }, 2500);\n  }, [i18n]);\n\n  return null\n};\n\nconst App: React.FC = () => {\n  return (\n    <Suspense fallback=\"...\">\n        <XASSY />\n        <NL />\n    </Suspense>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// not like to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\ni18n\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n    backend: {\n      loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`,\n    },\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\n\n\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './i18n';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-field\":\"FormField_form-field__2IFQ9\",\"form-fields-horizontal\":\"FormField_form-fields-horizontal__1dymU\",\"form-fields-centered\":\"FormField_form-fields-centered__2C1LC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__1kQCU\"};"],"sourceRoot":""}